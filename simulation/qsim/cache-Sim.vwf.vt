// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/23/2016 02:55:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Cache
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Cache_vlg_sample_tst(
	address,
	cache_en,
	clock,
	data_in,
	Mre,
	Mwe,
	reset,
	sampler_tx
);
input [11:0] address;
input  cache_en;
input  clock;
input [15:0] data_in;
input  Mre;
input  Mwe;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(address or cache_en or clock or data_in or Mre or Mwe or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Cache_vlg_check_tst (
	cont_out_block,
	controller_en_d,
	data_out,
	delayReq,
	done_cache,
	done_check_d,
	done_controller_d,
	done_write_back_d,
	mem_block_out_d,
	replaceStatusIn_d,
	replaceStatusOut_d,
	slowClock_d,
	state_con_d,
	state_d,
	write_address_mem_d,
	write_back_mem_d,
	write_block_d,
	sampler_rx
);
input [63:0] cont_out_block;
input  controller_en_d;
input [15:0] data_out;
input  delayReq;
input  done_cache;
input  done_check_d;
input  done_controller_d;
input  done_write_back_d;
input [63:0] mem_block_out_d;
input  replaceStatusIn_d;
input  replaceStatusOut_d;
input  slowClock_d;
input [3:0] state_con_d;
input [3:0] state_d;
input [9:0] write_address_mem_d;
input  write_back_mem_d;
input  write_block_d;
input sampler_rx;

reg [63:0] cont_out_block_expected;
reg  controller_en_d_expected;
reg [15:0] data_out_expected;
reg  delayReq_expected;
reg  done_cache_expected;
reg  done_check_d_expected;
reg  done_controller_d_expected;
reg  done_write_back_d_expected;
reg [63:0] mem_block_out_d_expected;
reg  replaceStatusIn_d_expected;
reg  replaceStatusOut_d_expected;
reg  slowClock_d_expected;
reg [3:0] state_con_d_expected;
reg [3:0] state_d_expected;
reg [9:0] write_address_mem_d_expected;
reg  write_back_mem_d_expected;
reg  write_block_d_expected;

reg [63:0] cont_out_block_prev;
reg  controller_en_d_prev;
reg [15:0] data_out_prev;
reg  delayReq_prev;
reg  done_cache_prev;
reg  done_check_d_prev;
reg  done_controller_d_prev;
reg  done_write_back_d_prev;
reg [63:0] mem_block_out_d_prev;
reg  replaceStatusIn_d_prev;
reg  replaceStatusOut_d_prev;
reg  slowClock_d_prev;
reg [3:0] state_con_d_prev;
reg [3:0] state_d_prev;
reg [9:0] write_address_mem_d_prev;
reg  write_back_mem_d_prev;
reg  write_block_d_prev;

reg [63:0] cont_out_block_expected_prev;
reg  controller_en_d_expected_prev;
reg [15:0] data_out_expected_prev;
reg  delayReq_expected_prev;
reg  done_cache_expected_prev;
reg  done_check_d_expected_prev;
reg  done_controller_d_expected_prev;
reg  done_write_back_d_expected_prev;
reg [63:0] mem_block_out_d_expected_prev;
reg  replaceStatusIn_d_expected_prev;
reg  replaceStatusOut_d_expected_prev;
reg  slowClock_d_expected_prev;
reg [3:0] state_con_d_expected_prev;
reg [3:0] state_d_expected_prev;
reg  write_back_mem_d_expected_prev;
reg  write_block_d_expected_prev;

reg [63:0] last_cont_out_block_exp;
reg  last_controller_en_d_exp;
reg [15:0] last_data_out_exp;
reg  last_delayReq_exp;
reg  last_done_cache_exp;
reg  last_done_check_d_exp;
reg  last_done_controller_d_exp;
reg  last_done_write_back_d_exp;
reg [63:0] last_mem_block_out_d_exp;
reg  last_replaceStatusIn_d_exp;
reg  last_replaceStatusOut_d_exp;
reg  last_slowClock_d_exp;
reg [3:0] last_state_con_d_exp;
reg [3:0] last_state_d_exp;
reg  last_write_back_mem_d_exp;
reg  last_write_block_d_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:17] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 17'b1;
end

// update real /o prevs

always @(trigger)
begin
	cont_out_block_prev = cont_out_block;
	controller_en_d_prev = controller_en_d;
	data_out_prev = data_out;
	delayReq_prev = delayReq;
	done_cache_prev = done_cache;
	done_check_d_prev = done_check_d;
	done_controller_d_prev = done_controller_d;
	done_write_back_d_prev = done_write_back_d;
	mem_block_out_d_prev = mem_block_out_d;
	replaceStatusIn_d_prev = replaceStatusIn_d;
	replaceStatusOut_d_prev = replaceStatusOut_d;
	slowClock_d_prev = slowClock_d;
	state_con_d_prev = state_con_d;
	state_d_prev = state_d;
	write_address_mem_d_prev = write_address_mem_d;
	write_back_mem_d_prev = write_back_mem_d;
	write_block_d_prev = write_block_d;
end

// update expected /o prevs

always @(trigger)
begin
	cont_out_block_expected_prev = cont_out_block_expected;
	controller_en_d_expected_prev = controller_en_d_expected;
	data_out_expected_prev = data_out_expected;
	delayReq_expected_prev = delayReq_expected;
	done_cache_expected_prev = done_cache_expected;
	done_check_d_expected_prev = done_check_d_expected;
	done_controller_d_expected_prev = done_controller_d_expected;
	done_write_back_d_expected_prev = done_write_back_d_expected;
	mem_block_out_d_expected_prev = mem_block_out_d_expected;
	replaceStatusIn_d_expected_prev = replaceStatusIn_d_expected;
	replaceStatusOut_d_expected_prev = replaceStatusOut_d_expected;
	slowClock_d_expected_prev = slowClock_d_expected;
	state_con_d_expected_prev = state_con_d_expected;
	state_d_expected_prev = state_d_expected;
	write_back_mem_d_expected_prev = write_back_mem_d_expected;
	write_block_d_expected_prev = write_block_d_expected;
end


// expected data_out[ 15 ]
initial
begin
	data_out_expected[15] = 1'bX;
end 
// expected data_out[ 14 ]
initial
begin
	data_out_expected[14] = 1'bX;
end 
// expected data_out[ 13 ]
initial
begin
	data_out_expected[13] = 1'bX;
end 
// expected data_out[ 12 ]
initial
begin
	data_out_expected[12] = 1'bX;
end 
// expected data_out[ 11 ]
initial
begin
	data_out_expected[11] = 1'bX;
end 
// expected data_out[ 10 ]
initial
begin
	data_out_expected[10] = 1'bX;
end 
// expected data_out[ 9 ]
initial
begin
	data_out_expected[9] = 1'bX;
end 
// expected data_out[ 8 ]
initial
begin
	data_out_expected[8] = 1'bX;
end 
// expected data_out[ 7 ]
initial
begin
	data_out_expected[7] = 1'bX;
end 
// expected data_out[ 6 ]
initial
begin
	data_out_expected[6] = 1'bX;
end 
// expected data_out[ 5 ]
initial
begin
	data_out_expected[5] = 1'bX;
end 
// expected data_out[ 4 ]
initial
begin
	data_out_expected[4] = 1'bX;
end 
// expected data_out[ 3 ]
initial
begin
	data_out_expected[3] = 1'bX;
end 
// expected data_out[ 2 ]
initial
begin
	data_out_expected[2] = 1'bX;
end 
// expected data_out[ 1 ]
initial
begin
	data_out_expected[1] = 1'bX;
end 
// expected data_out[ 0 ]
initial
begin
	data_out_expected[0] = 1'bX;
end 

// expected delayReq
initial
begin
	delayReq_expected = 1'bX;
end 

// expected done_cache
initial
begin
	done_cache_expected = 1'bX;
	done_cache_expected = #1890000 1'b0;
	done_cache_expected = #20000 1'bX;
	done_cache_expected = #560000 1'b0;
	done_cache_expected = #20000 1'bX;
end 
// expected state_con_d[ 3 ]
initial
begin
	state_con_d_expected[3] = 1'bX;
end 
// expected state_con_d[ 2 ]
initial
begin
	state_con_d_expected[2] = 1'bX;
end 
// expected state_con_d[ 1 ]
initial
begin
	state_con_d_expected[1] = 1'bX;
end 
// expected state_con_d[ 0 ]
initial
begin
	state_con_d_expected[0] = 1'bX;
end 
// expected state_d[ 3 ]
initial
begin
	state_d_expected[3] = 1'bX;
end 
// expected state_d[ 2 ]
initial
begin
	state_d_expected[2] = 1'bX;
end 
// expected state_d[ 1 ]
initial
begin
	state_d_expected[1] = 1'bX;
end 
// expected state_d[ 0 ]
initial
begin
	state_d_expected[0] = 1'bX;
end 

// expected controller_en_d
initial
begin
	controller_en_d_expected = 1'bX;
end 

// expected done_controller_d
initial
begin
	done_controller_d_expected = 1'bX;
end 

// expected done_check_d
initial
begin
	done_check_d_expected = 1'bX;
end 
// expected mem_block_out_d[ 63 ]
initial
begin
	mem_block_out_d_expected[63] = 1'bX;
end 
// expected mem_block_out_d[ 62 ]
initial
begin
	mem_block_out_d_expected[62] = 1'bX;
end 
// expected mem_block_out_d[ 61 ]
initial
begin
	mem_block_out_d_expected[61] = 1'bX;
end 
// expected mem_block_out_d[ 60 ]
initial
begin
	mem_block_out_d_expected[60] = 1'bX;
end 
// expected mem_block_out_d[ 59 ]
initial
begin
	mem_block_out_d_expected[59] = 1'bX;
end 
// expected mem_block_out_d[ 58 ]
initial
begin
	mem_block_out_d_expected[58] = 1'bX;
end 
// expected mem_block_out_d[ 57 ]
initial
begin
	mem_block_out_d_expected[57] = 1'bX;
end 
// expected mem_block_out_d[ 56 ]
initial
begin
	mem_block_out_d_expected[56] = 1'bX;
end 
// expected mem_block_out_d[ 55 ]
initial
begin
	mem_block_out_d_expected[55] = 1'bX;
end 
// expected mem_block_out_d[ 54 ]
initial
begin
	mem_block_out_d_expected[54] = 1'bX;
end 
// expected mem_block_out_d[ 53 ]
initial
begin
	mem_block_out_d_expected[53] = 1'bX;
end 
// expected mem_block_out_d[ 52 ]
initial
begin
	mem_block_out_d_expected[52] = 1'bX;
end 
// expected mem_block_out_d[ 51 ]
initial
begin
	mem_block_out_d_expected[51] = 1'bX;
end 
// expected mem_block_out_d[ 50 ]
initial
begin
	mem_block_out_d_expected[50] = 1'bX;
end 
// expected mem_block_out_d[ 49 ]
initial
begin
	mem_block_out_d_expected[49] = 1'bX;
end 
// expected mem_block_out_d[ 48 ]
initial
begin
	mem_block_out_d_expected[48] = 1'bX;
end 
// expected mem_block_out_d[ 47 ]
initial
begin
	mem_block_out_d_expected[47] = 1'bX;
end 
// expected mem_block_out_d[ 46 ]
initial
begin
	mem_block_out_d_expected[46] = 1'bX;
end 
// expected mem_block_out_d[ 45 ]
initial
begin
	mem_block_out_d_expected[45] = 1'bX;
end 
// expected mem_block_out_d[ 44 ]
initial
begin
	mem_block_out_d_expected[44] = 1'bX;
end 
// expected mem_block_out_d[ 43 ]
initial
begin
	mem_block_out_d_expected[43] = 1'bX;
end 
// expected mem_block_out_d[ 42 ]
initial
begin
	mem_block_out_d_expected[42] = 1'bX;
end 
// expected mem_block_out_d[ 41 ]
initial
begin
	mem_block_out_d_expected[41] = 1'bX;
end 
// expected mem_block_out_d[ 40 ]
initial
begin
	mem_block_out_d_expected[40] = 1'bX;
end 
// expected mem_block_out_d[ 39 ]
initial
begin
	mem_block_out_d_expected[39] = 1'bX;
end 
// expected mem_block_out_d[ 38 ]
initial
begin
	mem_block_out_d_expected[38] = 1'bX;
end 
// expected mem_block_out_d[ 37 ]
initial
begin
	mem_block_out_d_expected[37] = 1'bX;
end 
// expected mem_block_out_d[ 36 ]
initial
begin
	mem_block_out_d_expected[36] = 1'bX;
end 
// expected mem_block_out_d[ 35 ]
initial
begin
	mem_block_out_d_expected[35] = 1'bX;
end 
// expected mem_block_out_d[ 34 ]
initial
begin
	mem_block_out_d_expected[34] = 1'bX;
end 
// expected mem_block_out_d[ 33 ]
initial
begin
	mem_block_out_d_expected[33] = 1'bX;
end 
// expected mem_block_out_d[ 32 ]
initial
begin
	mem_block_out_d_expected[32] = 1'bX;
end 
// expected mem_block_out_d[ 31 ]
initial
begin
	mem_block_out_d_expected[31] = 1'bX;
end 
// expected mem_block_out_d[ 30 ]
initial
begin
	mem_block_out_d_expected[30] = 1'bX;
end 
// expected mem_block_out_d[ 29 ]
initial
begin
	mem_block_out_d_expected[29] = 1'bX;
end 
// expected mem_block_out_d[ 28 ]
initial
begin
	mem_block_out_d_expected[28] = 1'bX;
end 
// expected mem_block_out_d[ 27 ]
initial
begin
	mem_block_out_d_expected[27] = 1'bX;
end 
// expected mem_block_out_d[ 26 ]
initial
begin
	mem_block_out_d_expected[26] = 1'bX;
end 
// expected mem_block_out_d[ 25 ]
initial
begin
	mem_block_out_d_expected[25] = 1'bX;
end 
// expected mem_block_out_d[ 24 ]
initial
begin
	mem_block_out_d_expected[24] = 1'bX;
end 
// expected mem_block_out_d[ 23 ]
initial
begin
	mem_block_out_d_expected[23] = 1'bX;
end 
// expected mem_block_out_d[ 22 ]
initial
begin
	mem_block_out_d_expected[22] = 1'bX;
end 
// expected mem_block_out_d[ 21 ]
initial
begin
	mem_block_out_d_expected[21] = 1'bX;
end 
// expected mem_block_out_d[ 20 ]
initial
begin
	mem_block_out_d_expected[20] = 1'bX;
end 
// expected mem_block_out_d[ 19 ]
initial
begin
	mem_block_out_d_expected[19] = 1'bX;
end 
// expected mem_block_out_d[ 18 ]
initial
begin
	mem_block_out_d_expected[18] = 1'bX;
end 
// expected mem_block_out_d[ 17 ]
initial
begin
	mem_block_out_d_expected[17] = 1'bX;
end 
// expected mem_block_out_d[ 16 ]
initial
begin
	mem_block_out_d_expected[16] = 1'bX;
end 
// expected mem_block_out_d[ 15 ]
initial
begin
	mem_block_out_d_expected[15] = 1'bX;
end 
// expected mem_block_out_d[ 14 ]
initial
begin
	mem_block_out_d_expected[14] = 1'bX;
end 
// expected mem_block_out_d[ 13 ]
initial
begin
	mem_block_out_d_expected[13] = 1'bX;
end 
// expected mem_block_out_d[ 12 ]
initial
begin
	mem_block_out_d_expected[12] = 1'bX;
end 
// expected mem_block_out_d[ 11 ]
initial
begin
	mem_block_out_d_expected[11] = 1'bX;
end 
// expected mem_block_out_d[ 10 ]
initial
begin
	mem_block_out_d_expected[10] = 1'bX;
end 
// expected mem_block_out_d[ 9 ]
initial
begin
	mem_block_out_d_expected[9] = 1'bX;
end 
// expected mem_block_out_d[ 8 ]
initial
begin
	mem_block_out_d_expected[8] = 1'bX;
end 
// expected mem_block_out_d[ 7 ]
initial
begin
	mem_block_out_d_expected[7] = 1'bX;
end 
// expected mem_block_out_d[ 6 ]
initial
begin
	mem_block_out_d_expected[6] = 1'bX;
end 
// expected mem_block_out_d[ 5 ]
initial
begin
	mem_block_out_d_expected[5] = 1'bX;
end 
// expected mem_block_out_d[ 4 ]
initial
begin
	mem_block_out_d_expected[4] = 1'bX;
end 
// expected mem_block_out_d[ 3 ]
initial
begin
	mem_block_out_d_expected[3] = 1'bX;
end 
// expected mem_block_out_d[ 2 ]
initial
begin
	mem_block_out_d_expected[2] = 1'bX;
end 
// expected mem_block_out_d[ 1 ]
initial
begin
	mem_block_out_d_expected[1] = 1'bX;
end 
// expected mem_block_out_d[ 0 ]
initial
begin
	mem_block_out_d_expected[0] = 1'bX;
end 

// expected replaceStatusIn_d
initial
begin
	replaceStatusIn_d_expected = 1'bX;
end 

// expected replaceStatusOut_d
initial
begin
	replaceStatusOut_d_expected = 1'bX;
end 

// expected slowClock_d
initial
begin
	slowClock_d_expected = 1'bX;
end 
// expected cont_out_block[ 63 ]
initial
begin
	cont_out_block_expected[63] = 1'bX;
end 
// expected cont_out_block[ 62 ]
initial
begin
	cont_out_block_expected[62] = 1'bX;
end 
// expected cont_out_block[ 61 ]
initial
begin
	cont_out_block_expected[61] = 1'bX;
end 
// expected cont_out_block[ 60 ]
initial
begin
	cont_out_block_expected[60] = 1'bX;
end 
// expected cont_out_block[ 59 ]
initial
begin
	cont_out_block_expected[59] = 1'bX;
end 
// expected cont_out_block[ 58 ]
initial
begin
	cont_out_block_expected[58] = 1'bX;
end 
// expected cont_out_block[ 57 ]
initial
begin
	cont_out_block_expected[57] = 1'bX;
end 
// expected cont_out_block[ 56 ]
initial
begin
	cont_out_block_expected[56] = 1'bX;
end 
// expected cont_out_block[ 55 ]
initial
begin
	cont_out_block_expected[55] = 1'bX;
end 
// expected cont_out_block[ 54 ]
initial
begin
	cont_out_block_expected[54] = 1'bX;
end 
// expected cont_out_block[ 53 ]
initial
begin
	cont_out_block_expected[53] = 1'bX;
end 
// expected cont_out_block[ 52 ]
initial
begin
	cont_out_block_expected[52] = 1'bX;
end 
// expected cont_out_block[ 51 ]
initial
begin
	cont_out_block_expected[51] = 1'bX;
end 
// expected cont_out_block[ 50 ]
initial
begin
	cont_out_block_expected[50] = 1'bX;
end 
// expected cont_out_block[ 49 ]
initial
begin
	cont_out_block_expected[49] = 1'bX;
end 
// expected cont_out_block[ 48 ]
initial
begin
	cont_out_block_expected[48] = 1'bX;
end 
// expected cont_out_block[ 47 ]
initial
begin
	cont_out_block_expected[47] = 1'bX;
end 
// expected cont_out_block[ 46 ]
initial
begin
	cont_out_block_expected[46] = 1'bX;
end 
// expected cont_out_block[ 45 ]
initial
begin
	cont_out_block_expected[45] = 1'bX;
end 
// expected cont_out_block[ 44 ]
initial
begin
	cont_out_block_expected[44] = 1'bX;
end 
// expected cont_out_block[ 43 ]
initial
begin
	cont_out_block_expected[43] = 1'bX;
end 
// expected cont_out_block[ 42 ]
initial
begin
	cont_out_block_expected[42] = 1'bX;
end 
// expected cont_out_block[ 41 ]
initial
begin
	cont_out_block_expected[41] = 1'bX;
end 
// expected cont_out_block[ 40 ]
initial
begin
	cont_out_block_expected[40] = 1'bX;
end 
// expected cont_out_block[ 39 ]
initial
begin
	cont_out_block_expected[39] = 1'bX;
end 
// expected cont_out_block[ 38 ]
initial
begin
	cont_out_block_expected[38] = 1'bX;
end 
// expected cont_out_block[ 37 ]
initial
begin
	cont_out_block_expected[37] = 1'bX;
end 
// expected cont_out_block[ 36 ]
initial
begin
	cont_out_block_expected[36] = 1'bX;
end 
// expected cont_out_block[ 35 ]
initial
begin
	cont_out_block_expected[35] = 1'bX;
end 
// expected cont_out_block[ 34 ]
initial
begin
	cont_out_block_expected[34] = 1'bX;
end 
// expected cont_out_block[ 33 ]
initial
begin
	cont_out_block_expected[33] = 1'bX;
end 
// expected cont_out_block[ 32 ]
initial
begin
	cont_out_block_expected[32] = 1'bX;
end 
// expected cont_out_block[ 31 ]
initial
begin
	cont_out_block_expected[31] = 1'bX;
end 
// expected cont_out_block[ 30 ]
initial
begin
	cont_out_block_expected[30] = 1'bX;
end 
// expected cont_out_block[ 29 ]
initial
begin
	cont_out_block_expected[29] = 1'bX;
end 
// expected cont_out_block[ 28 ]
initial
begin
	cont_out_block_expected[28] = 1'bX;
end 
// expected cont_out_block[ 27 ]
initial
begin
	cont_out_block_expected[27] = 1'bX;
end 
// expected cont_out_block[ 26 ]
initial
begin
	cont_out_block_expected[26] = 1'bX;
end 
// expected cont_out_block[ 25 ]
initial
begin
	cont_out_block_expected[25] = 1'bX;
end 
// expected cont_out_block[ 24 ]
initial
begin
	cont_out_block_expected[24] = 1'bX;
end 
// expected cont_out_block[ 23 ]
initial
begin
	cont_out_block_expected[23] = 1'bX;
end 
// expected cont_out_block[ 22 ]
initial
begin
	cont_out_block_expected[22] = 1'bX;
end 
// expected cont_out_block[ 21 ]
initial
begin
	cont_out_block_expected[21] = 1'bX;
end 
// expected cont_out_block[ 20 ]
initial
begin
	cont_out_block_expected[20] = 1'bX;
end 
// expected cont_out_block[ 19 ]
initial
begin
	cont_out_block_expected[19] = 1'bX;
end 
// expected cont_out_block[ 18 ]
initial
begin
	cont_out_block_expected[18] = 1'bX;
end 
// expected cont_out_block[ 17 ]
initial
begin
	cont_out_block_expected[17] = 1'bX;
end 
// expected cont_out_block[ 16 ]
initial
begin
	cont_out_block_expected[16] = 1'bX;
end 
// expected cont_out_block[ 15 ]
initial
begin
	cont_out_block_expected[15] = 1'bX;
end 
// expected cont_out_block[ 14 ]
initial
begin
	cont_out_block_expected[14] = 1'bX;
end 
// expected cont_out_block[ 13 ]
initial
begin
	cont_out_block_expected[13] = 1'bX;
end 
// expected cont_out_block[ 12 ]
initial
begin
	cont_out_block_expected[12] = 1'bX;
end 
// expected cont_out_block[ 11 ]
initial
begin
	cont_out_block_expected[11] = 1'bX;
end 
// expected cont_out_block[ 10 ]
initial
begin
	cont_out_block_expected[10] = 1'bX;
end 
// expected cont_out_block[ 9 ]
initial
begin
	cont_out_block_expected[9] = 1'bX;
end 
// expected cont_out_block[ 8 ]
initial
begin
	cont_out_block_expected[8] = 1'bX;
end 
// expected cont_out_block[ 7 ]
initial
begin
	cont_out_block_expected[7] = 1'bX;
end 
// expected cont_out_block[ 6 ]
initial
begin
	cont_out_block_expected[6] = 1'bX;
end 
// expected cont_out_block[ 5 ]
initial
begin
	cont_out_block_expected[5] = 1'bX;
end 
// expected cont_out_block[ 4 ]
initial
begin
	cont_out_block_expected[4] = 1'bX;
end 
// expected cont_out_block[ 3 ]
initial
begin
	cont_out_block_expected[3] = 1'bX;
end 
// expected cont_out_block[ 2 ]
initial
begin
	cont_out_block_expected[2] = 1'bX;
end 
// expected cont_out_block[ 1 ]
initial
begin
	cont_out_block_expected[1] = 1'bX;
end 
// expected cont_out_block[ 0 ]
initial
begin
	cont_out_block_expected[0] = 1'bX;
end 

// expected done_write_back_d
initial
begin
	done_write_back_d_expected = 1'bX;
end 

// expected write_back_mem_d
initial
begin
	write_back_mem_d_expected = 1'bX;
end 

// expected write_block_d
initial
begin
	write_block_d_expected = 1'bX;
end 
// generate trigger
always @(cont_out_block_expected or cont_out_block or controller_en_d_expected or controller_en_d or data_out_expected or data_out or delayReq_expected or delayReq or done_cache_expected or done_cache or done_check_d_expected or done_check_d or done_controller_d_expected or done_controller_d or done_write_back_d_expected or done_write_back_d or mem_block_out_d_expected or mem_block_out_d or replaceStatusIn_d_expected or replaceStatusIn_d or replaceStatusOut_d_expected or replaceStatusOut_d or slowClock_d_expected or slowClock_d or state_con_d_expected or state_con_d or state_d_expected or state_d or write_address_mem_d_expected or write_address_mem_d or write_back_mem_d_expected or write_back_mem_d or write_block_d_expected or write_block_d)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cont_out_block = %b | expected controller_en_d = %b | expected data_out = %b | expected delayReq = %b | expected done_cache = %b | expected done_check_d = %b | expected done_controller_d = %b | expected done_write_back_d = %b | expected mem_block_out_d = %b | expected replaceStatusIn_d = %b | expected replaceStatusOut_d = %b | expected slowClock_d = %b | expected state_con_d = %b | expected state_d = %b | expected write_address_mem_d = %b | expected write_back_mem_d = %b | expected write_block_d = %b | ",cont_out_block_expected_prev,controller_en_d_expected_prev,data_out_expected_prev,delayReq_expected_prev,done_cache_expected_prev,done_check_d_expected_prev,done_controller_d_expected_prev,done_write_back_d_expected_prev,mem_block_out_d_expected_prev,replaceStatusIn_d_expected_prev,replaceStatusOut_d_expected_prev,slowClock_d_expected_prev,state_con_d_expected_prev,state_d_expected_prev,write_address_mem_d_expected_prev,write_back_mem_d_expected_prev,write_block_d_expected_prev);
	$display("| real cont_out_block = %b | real controller_en_d = %b | real data_out = %b | real delayReq = %b | real done_cache = %b | real done_check_d = %b | real done_controller_d = %b | real done_write_back_d = %b | real mem_block_out_d = %b | real replaceStatusIn_d = %b | real replaceStatusOut_d = %b | real slowClock_d = %b | real state_con_d = %b | real state_d = %b | real write_address_mem_d = %b | real write_back_mem_d = %b | real write_block_d = %b | ",cont_out_block_prev,controller_en_d_prev,data_out_prev,delayReq_prev,done_cache_prev,done_check_d_prev,done_controller_d_prev,done_write_back_d_prev,mem_block_out_d_prev,replaceStatusIn_d_prev,replaceStatusOut_d_prev,slowClock_d_prev,state_con_d_prev,state_d_prev,write_address_mem_d_prev,write_back_mem_d_prev,write_block_d_prev);
`endif
	if (
		( cont_out_block_expected_prev[0] !== 1'bx ) && ( cont_out_block_prev[0] !== cont_out_block_expected_prev[0] )
		&& ((cont_out_block_expected_prev[0] !== last_cont_out_block_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[0] = cont_out_block_expected_prev[0];
	end
	if (
		( cont_out_block_expected_prev[1] !== 1'bx ) && ( cont_out_block_prev[1] !== cont_out_block_expected_prev[1] )
		&& ((cont_out_block_expected_prev[1] !== last_cont_out_block_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[1] = cont_out_block_expected_prev[1];
	end
	if (
		( cont_out_block_expected_prev[2] !== 1'bx ) && ( cont_out_block_prev[2] !== cont_out_block_expected_prev[2] )
		&& ((cont_out_block_expected_prev[2] !== last_cont_out_block_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[2] = cont_out_block_expected_prev[2];
	end
	if (
		( cont_out_block_expected_prev[3] !== 1'bx ) && ( cont_out_block_prev[3] !== cont_out_block_expected_prev[3] )
		&& ((cont_out_block_expected_prev[3] !== last_cont_out_block_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[3] = cont_out_block_expected_prev[3];
	end
	if (
		( cont_out_block_expected_prev[4] !== 1'bx ) && ( cont_out_block_prev[4] !== cont_out_block_expected_prev[4] )
		&& ((cont_out_block_expected_prev[4] !== last_cont_out_block_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[4] = cont_out_block_expected_prev[4];
	end
	if (
		( cont_out_block_expected_prev[5] !== 1'bx ) && ( cont_out_block_prev[5] !== cont_out_block_expected_prev[5] )
		&& ((cont_out_block_expected_prev[5] !== last_cont_out_block_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[5] = cont_out_block_expected_prev[5];
	end
	if (
		( cont_out_block_expected_prev[6] !== 1'bx ) && ( cont_out_block_prev[6] !== cont_out_block_expected_prev[6] )
		&& ((cont_out_block_expected_prev[6] !== last_cont_out_block_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[6] = cont_out_block_expected_prev[6];
	end
	if (
		( cont_out_block_expected_prev[7] !== 1'bx ) && ( cont_out_block_prev[7] !== cont_out_block_expected_prev[7] )
		&& ((cont_out_block_expected_prev[7] !== last_cont_out_block_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[7] = cont_out_block_expected_prev[7];
	end
	if (
		( cont_out_block_expected_prev[8] !== 1'bx ) && ( cont_out_block_prev[8] !== cont_out_block_expected_prev[8] )
		&& ((cont_out_block_expected_prev[8] !== last_cont_out_block_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[8] = cont_out_block_expected_prev[8];
	end
	if (
		( cont_out_block_expected_prev[9] !== 1'bx ) && ( cont_out_block_prev[9] !== cont_out_block_expected_prev[9] )
		&& ((cont_out_block_expected_prev[9] !== last_cont_out_block_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[9] = cont_out_block_expected_prev[9];
	end
	if (
		( cont_out_block_expected_prev[10] !== 1'bx ) && ( cont_out_block_prev[10] !== cont_out_block_expected_prev[10] )
		&& ((cont_out_block_expected_prev[10] !== last_cont_out_block_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[10] = cont_out_block_expected_prev[10];
	end
	if (
		( cont_out_block_expected_prev[11] !== 1'bx ) && ( cont_out_block_prev[11] !== cont_out_block_expected_prev[11] )
		&& ((cont_out_block_expected_prev[11] !== last_cont_out_block_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[11] = cont_out_block_expected_prev[11];
	end
	if (
		( cont_out_block_expected_prev[12] !== 1'bx ) && ( cont_out_block_prev[12] !== cont_out_block_expected_prev[12] )
		&& ((cont_out_block_expected_prev[12] !== last_cont_out_block_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[12] = cont_out_block_expected_prev[12];
	end
	if (
		( cont_out_block_expected_prev[13] !== 1'bx ) && ( cont_out_block_prev[13] !== cont_out_block_expected_prev[13] )
		&& ((cont_out_block_expected_prev[13] !== last_cont_out_block_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[13] = cont_out_block_expected_prev[13];
	end
	if (
		( cont_out_block_expected_prev[14] !== 1'bx ) && ( cont_out_block_prev[14] !== cont_out_block_expected_prev[14] )
		&& ((cont_out_block_expected_prev[14] !== last_cont_out_block_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[14] = cont_out_block_expected_prev[14];
	end
	if (
		( cont_out_block_expected_prev[15] !== 1'bx ) && ( cont_out_block_prev[15] !== cont_out_block_expected_prev[15] )
		&& ((cont_out_block_expected_prev[15] !== last_cont_out_block_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[15] = cont_out_block_expected_prev[15];
	end
	if (
		( cont_out_block_expected_prev[16] !== 1'bx ) && ( cont_out_block_prev[16] !== cont_out_block_expected_prev[16] )
		&& ((cont_out_block_expected_prev[16] !== last_cont_out_block_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[16] = cont_out_block_expected_prev[16];
	end
	if (
		( cont_out_block_expected_prev[17] !== 1'bx ) && ( cont_out_block_prev[17] !== cont_out_block_expected_prev[17] )
		&& ((cont_out_block_expected_prev[17] !== last_cont_out_block_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[17] = cont_out_block_expected_prev[17];
	end
	if (
		( cont_out_block_expected_prev[18] !== 1'bx ) && ( cont_out_block_prev[18] !== cont_out_block_expected_prev[18] )
		&& ((cont_out_block_expected_prev[18] !== last_cont_out_block_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[18] = cont_out_block_expected_prev[18];
	end
	if (
		( cont_out_block_expected_prev[19] !== 1'bx ) && ( cont_out_block_prev[19] !== cont_out_block_expected_prev[19] )
		&& ((cont_out_block_expected_prev[19] !== last_cont_out_block_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[19] = cont_out_block_expected_prev[19];
	end
	if (
		( cont_out_block_expected_prev[20] !== 1'bx ) && ( cont_out_block_prev[20] !== cont_out_block_expected_prev[20] )
		&& ((cont_out_block_expected_prev[20] !== last_cont_out_block_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[20] = cont_out_block_expected_prev[20];
	end
	if (
		( cont_out_block_expected_prev[21] !== 1'bx ) && ( cont_out_block_prev[21] !== cont_out_block_expected_prev[21] )
		&& ((cont_out_block_expected_prev[21] !== last_cont_out_block_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[21] = cont_out_block_expected_prev[21];
	end
	if (
		( cont_out_block_expected_prev[22] !== 1'bx ) && ( cont_out_block_prev[22] !== cont_out_block_expected_prev[22] )
		&& ((cont_out_block_expected_prev[22] !== last_cont_out_block_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[22] = cont_out_block_expected_prev[22];
	end
	if (
		( cont_out_block_expected_prev[23] !== 1'bx ) && ( cont_out_block_prev[23] !== cont_out_block_expected_prev[23] )
		&& ((cont_out_block_expected_prev[23] !== last_cont_out_block_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[23] = cont_out_block_expected_prev[23];
	end
	if (
		( cont_out_block_expected_prev[24] !== 1'bx ) && ( cont_out_block_prev[24] !== cont_out_block_expected_prev[24] )
		&& ((cont_out_block_expected_prev[24] !== last_cont_out_block_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[24] = cont_out_block_expected_prev[24];
	end
	if (
		( cont_out_block_expected_prev[25] !== 1'bx ) && ( cont_out_block_prev[25] !== cont_out_block_expected_prev[25] )
		&& ((cont_out_block_expected_prev[25] !== last_cont_out_block_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[25] = cont_out_block_expected_prev[25];
	end
	if (
		( cont_out_block_expected_prev[26] !== 1'bx ) && ( cont_out_block_prev[26] !== cont_out_block_expected_prev[26] )
		&& ((cont_out_block_expected_prev[26] !== last_cont_out_block_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[26] = cont_out_block_expected_prev[26];
	end
	if (
		( cont_out_block_expected_prev[27] !== 1'bx ) && ( cont_out_block_prev[27] !== cont_out_block_expected_prev[27] )
		&& ((cont_out_block_expected_prev[27] !== last_cont_out_block_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[27] = cont_out_block_expected_prev[27];
	end
	if (
		( cont_out_block_expected_prev[28] !== 1'bx ) && ( cont_out_block_prev[28] !== cont_out_block_expected_prev[28] )
		&& ((cont_out_block_expected_prev[28] !== last_cont_out_block_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[28] = cont_out_block_expected_prev[28];
	end
	if (
		( cont_out_block_expected_prev[29] !== 1'bx ) && ( cont_out_block_prev[29] !== cont_out_block_expected_prev[29] )
		&& ((cont_out_block_expected_prev[29] !== last_cont_out_block_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[29] = cont_out_block_expected_prev[29];
	end
	if (
		( cont_out_block_expected_prev[30] !== 1'bx ) && ( cont_out_block_prev[30] !== cont_out_block_expected_prev[30] )
		&& ((cont_out_block_expected_prev[30] !== last_cont_out_block_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[30] = cont_out_block_expected_prev[30];
	end
	if (
		( cont_out_block_expected_prev[31] !== 1'bx ) && ( cont_out_block_prev[31] !== cont_out_block_expected_prev[31] )
		&& ((cont_out_block_expected_prev[31] !== last_cont_out_block_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[31] = cont_out_block_expected_prev[31];
	end
	if (
		( cont_out_block_expected_prev[32] !== 1'bx ) && ( cont_out_block_prev[32] !== cont_out_block_expected_prev[32] )
		&& ((cont_out_block_expected_prev[32] !== last_cont_out_block_exp[32]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[32] = cont_out_block_expected_prev[32];
	end
	if (
		( cont_out_block_expected_prev[33] !== 1'bx ) && ( cont_out_block_prev[33] !== cont_out_block_expected_prev[33] )
		&& ((cont_out_block_expected_prev[33] !== last_cont_out_block_exp[33]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[33] = cont_out_block_expected_prev[33];
	end
	if (
		( cont_out_block_expected_prev[34] !== 1'bx ) && ( cont_out_block_prev[34] !== cont_out_block_expected_prev[34] )
		&& ((cont_out_block_expected_prev[34] !== last_cont_out_block_exp[34]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[34] = cont_out_block_expected_prev[34];
	end
	if (
		( cont_out_block_expected_prev[35] !== 1'bx ) && ( cont_out_block_prev[35] !== cont_out_block_expected_prev[35] )
		&& ((cont_out_block_expected_prev[35] !== last_cont_out_block_exp[35]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[35] = cont_out_block_expected_prev[35];
	end
	if (
		( cont_out_block_expected_prev[36] !== 1'bx ) && ( cont_out_block_prev[36] !== cont_out_block_expected_prev[36] )
		&& ((cont_out_block_expected_prev[36] !== last_cont_out_block_exp[36]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[36] = cont_out_block_expected_prev[36];
	end
	if (
		( cont_out_block_expected_prev[37] !== 1'bx ) && ( cont_out_block_prev[37] !== cont_out_block_expected_prev[37] )
		&& ((cont_out_block_expected_prev[37] !== last_cont_out_block_exp[37]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[37] = cont_out_block_expected_prev[37];
	end
	if (
		( cont_out_block_expected_prev[38] !== 1'bx ) && ( cont_out_block_prev[38] !== cont_out_block_expected_prev[38] )
		&& ((cont_out_block_expected_prev[38] !== last_cont_out_block_exp[38]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[38] = cont_out_block_expected_prev[38];
	end
	if (
		( cont_out_block_expected_prev[39] !== 1'bx ) && ( cont_out_block_prev[39] !== cont_out_block_expected_prev[39] )
		&& ((cont_out_block_expected_prev[39] !== last_cont_out_block_exp[39]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[39] = cont_out_block_expected_prev[39];
	end
	if (
		( cont_out_block_expected_prev[40] !== 1'bx ) && ( cont_out_block_prev[40] !== cont_out_block_expected_prev[40] )
		&& ((cont_out_block_expected_prev[40] !== last_cont_out_block_exp[40]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[40] = cont_out_block_expected_prev[40];
	end
	if (
		( cont_out_block_expected_prev[41] !== 1'bx ) && ( cont_out_block_prev[41] !== cont_out_block_expected_prev[41] )
		&& ((cont_out_block_expected_prev[41] !== last_cont_out_block_exp[41]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[41] = cont_out_block_expected_prev[41];
	end
	if (
		( cont_out_block_expected_prev[42] !== 1'bx ) && ( cont_out_block_prev[42] !== cont_out_block_expected_prev[42] )
		&& ((cont_out_block_expected_prev[42] !== last_cont_out_block_exp[42]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[42] = cont_out_block_expected_prev[42];
	end
	if (
		( cont_out_block_expected_prev[43] !== 1'bx ) && ( cont_out_block_prev[43] !== cont_out_block_expected_prev[43] )
		&& ((cont_out_block_expected_prev[43] !== last_cont_out_block_exp[43]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[43] = cont_out_block_expected_prev[43];
	end
	if (
		( cont_out_block_expected_prev[44] !== 1'bx ) && ( cont_out_block_prev[44] !== cont_out_block_expected_prev[44] )
		&& ((cont_out_block_expected_prev[44] !== last_cont_out_block_exp[44]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[44] = cont_out_block_expected_prev[44];
	end
	if (
		( cont_out_block_expected_prev[45] !== 1'bx ) && ( cont_out_block_prev[45] !== cont_out_block_expected_prev[45] )
		&& ((cont_out_block_expected_prev[45] !== last_cont_out_block_exp[45]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[45] = cont_out_block_expected_prev[45];
	end
	if (
		( cont_out_block_expected_prev[46] !== 1'bx ) && ( cont_out_block_prev[46] !== cont_out_block_expected_prev[46] )
		&& ((cont_out_block_expected_prev[46] !== last_cont_out_block_exp[46]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[46] = cont_out_block_expected_prev[46];
	end
	if (
		( cont_out_block_expected_prev[47] !== 1'bx ) && ( cont_out_block_prev[47] !== cont_out_block_expected_prev[47] )
		&& ((cont_out_block_expected_prev[47] !== last_cont_out_block_exp[47]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[47] = cont_out_block_expected_prev[47];
	end
	if (
		( cont_out_block_expected_prev[48] !== 1'bx ) && ( cont_out_block_prev[48] !== cont_out_block_expected_prev[48] )
		&& ((cont_out_block_expected_prev[48] !== last_cont_out_block_exp[48]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[48] = cont_out_block_expected_prev[48];
	end
	if (
		( cont_out_block_expected_prev[49] !== 1'bx ) && ( cont_out_block_prev[49] !== cont_out_block_expected_prev[49] )
		&& ((cont_out_block_expected_prev[49] !== last_cont_out_block_exp[49]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[49] = cont_out_block_expected_prev[49];
	end
	if (
		( cont_out_block_expected_prev[50] !== 1'bx ) && ( cont_out_block_prev[50] !== cont_out_block_expected_prev[50] )
		&& ((cont_out_block_expected_prev[50] !== last_cont_out_block_exp[50]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[50] = cont_out_block_expected_prev[50];
	end
	if (
		( cont_out_block_expected_prev[51] !== 1'bx ) && ( cont_out_block_prev[51] !== cont_out_block_expected_prev[51] )
		&& ((cont_out_block_expected_prev[51] !== last_cont_out_block_exp[51]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[51] = cont_out_block_expected_prev[51];
	end
	if (
		( cont_out_block_expected_prev[52] !== 1'bx ) && ( cont_out_block_prev[52] !== cont_out_block_expected_prev[52] )
		&& ((cont_out_block_expected_prev[52] !== last_cont_out_block_exp[52]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[52] = cont_out_block_expected_prev[52];
	end
	if (
		( cont_out_block_expected_prev[53] !== 1'bx ) && ( cont_out_block_prev[53] !== cont_out_block_expected_prev[53] )
		&& ((cont_out_block_expected_prev[53] !== last_cont_out_block_exp[53]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[53] = cont_out_block_expected_prev[53];
	end
	if (
		( cont_out_block_expected_prev[54] !== 1'bx ) && ( cont_out_block_prev[54] !== cont_out_block_expected_prev[54] )
		&& ((cont_out_block_expected_prev[54] !== last_cont_out_block_exp[54]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[54] = cont_out_block_expected_prev[54];
	end
	if (
		( cont_out_block_expected_prev[55] !== 1'bx ) && ( cont_out_block_prev[55] !== cont_out_block_expected_prev[55] )
		&& ((cont_out_block_expected_prev[55] !== last_cont_out_block_exp[55]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[55] = cont_out_block_expected_prev[55];
	end
	if (
		( cont_out_block_expected_prev[56] !== 1'bx ) && ( cont_out_block_prev[56] !== cont_out_block_expected_prev[56] )
		&& ((cont_out_block_expected_prev[56] !== last_cont_out_block_exp[56]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[56] = cont_out_block_expected_prev[56];
	end
	if (
		( cont_out_block_expected_prev[57] !== 1'bx ) && ( cont_out_block_prev[57] !== cont_out_block_expected_prev[57] )
		&& ((cont_out_block_expected_prev[57] !== last_cont_out_block_exp[57]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[57] = cont_out_block_expected_prev[57];
	end
	if (
		( cont_out_block_expected_prev[58] !== 1'bx ) && ( cont_out_block_prev[58] !== cont_out_block_expected_prev[58] )
		&& ((cont_out_block_expected_prev[58] !== last_cont_out_block_exp[58]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[58] = cont_out_block_expected_prev[58];
	end
	if (
		( cont_out_block_expected_prev[59] !== 1'bx ) && ( cont_out_block_prev[59] !== cont_out_block_expected_prev[59] )
		&& ((cont_out_block_expected_prev[59] !== last_cont_out_block_exp[59]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[59] = cont_out_block_expected_prev[59];
	end
	if (
		( cont_out_block_expected_prev[60] !== 1'bx ) && ( cont_out_block_prev[60] !== cont_out_block_expected_prev[60] )
		&& ((cont_out_block_expected_prev[60] !== last_cont_out_block_exp[60]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[60] = cont_out_block_expected_prev[60];
	end
	if (
		( cont_out_block_expected_prev[61] !== 1'bx ) && ( cont_out_block_prev[61] !== cont_out_block_expected_prev[61] )
		&& ((cont_out_block_expected_prev[61] !== last_cont_out_block_exp[61]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[61] = cont_out_block_expected_prev[61];
	end
	if (
		( cont_out_block_expected_prev[62] !== 1'bx ) && ( cont_out_block_prev[62] !== cont_out_block_expected_prev[62] )
		&& ((cont_out_block_expected_prev[62] !== last_cont_out_block_exp[62]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[62] = cont_out_block_expected_prev[62];
	end
	if (
		( cont_out_block_expected_prev[63] !== 1'bx ) && ( cont_out_block_prev[63] !== cont_out_block_expected_prev[63] )
		&& ((cont_out_block_expected_prev[63] !== last_cont_out_block_exp[63]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_out_block[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_out_block_expected_prev);
		$display ("     Real value = %b", cont_out_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cont_out_block_exp[63] = cont_out_block_expected_prev[63];
	end
	if (
		( controller_en_d_expected_prev !== 1'bx ) && ( controller_en_d_prev !== controller_en_d_expected_prev )
		&& ((controller_en_d_expected_prev !== last_controller_en_d_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controller_en_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controller_en_d_expected_prev);
		$display ("     Real value = %b", controller_en_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_controller_en_d_exp = controller_en_d_expected_prev;
	end
	if (
		( data_out_expected_prev[0] !== 1'bx ) && ( data_out_prev[0] !== data_out_expected_prev[0] )
		&& ((data_out_expected_prev[0] !== last_data_out_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[0] = data_out_expected_prev[0];
	end
	if (
		( data_out_expected_prev[1] !== 1'bx ) && ( data_out_prev[1] !== data_out_expected_prev[1] )
		&& ((data_out_expected_prev[1] !== last_data_out_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[1] = data_out_expected_prev[1];
	end
	if (
		( data_out_expected_prev[2] !== 1'bx ) && ( data_out_prev[2] !== data_out_expected_prev[2] )
		&& ((data_out_expected_prev[2] !== last_data_out_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[2] = data_out_expected_prev[2];
	end
	if (
		( data_out_expected_prev[3] !== 1'bx ) && ( data_out_prev[3] !== data_out_expected_prev[3] )
		&& ((data_out_expected_prev[3] !== last_data_out_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[3] = data_out_expected_prev[3];
	end
	if (
		( data_out_expected_prev[4] !== 1'bx ) && ( data_out_prev[4] !== data_out_expected_prev[4] )
		&& ((data_out_expected_prev[4] !== last_data_out_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[4] = data_out_expected_prev[4];
	end
	if (
		( data_out_expected_prev[5] !== 1'bx ) && ( data_out_prev[5] !== data_out_expected_prev[5] )
		&& ((data_out_expected_prev[5] !== last_data_out_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[5] = data_out_expected_prev[5];
	end
	if (
		( data_out_expected_prev[6] !== 1'bx ) && ( data_out_prev[6] !== data_out_expected_prev[6] )
		&& ((data_out_expected_prev[6] !== last_data_out_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[6] = data_out_expected_prev[6];
	end
	if (
		( data_out_expected_prev[7] !== 1'bx ) && ( data_out_prev[7] !== data_out_expected_prev[7] )
		&& ((data_out_expected_prev[7] !== last_data_out_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[7] = data_out_expected_prev[7];
	end
	if (
		( data_out_expected_prev[8] !== 1'bx ) && ( data_out_prev[8] !== data_out_expected_prev[8] )
		&& ((data_out_expected_prev[8] !== last_data_out_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[8] = data_out_expected_prev[8];
	end
	if (
		( data_out_expected_prev[9] !== 1'bx ) && ( data_out_prev[9] !== data_out_expected_prev[9] )
		&& ((data_out_expected_prev[9] !== last_data_out_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[9] = data_out_expected_prev[9];
	end
	if (
		( data_out_expected_prev[10] !== 1'bx ) && ( data_out_prev[10] !== data_out_expected_prev[10] )
		&& ((data_out_expected_prev[10] !== last_data_out_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[10] = data_out_expected_prev[10];
	end
	if (
		( data_out_expected_prev[11] !== 1'bx ) && ( data_out_prev[11] !== data_out_expected_prev[11] )
		&& ((data_out_expected_prev[11] !== last_data_out_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[11] = data_out_expected_prev[11];
	end
	if (
		( data_out_expected_prev[12] !== 1'bx ) && ( data_out_prev[12] !== data_out_expected_prev[12] )
		&& ((data_out_expected_prev[12] !== last_data_out_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[12] = data_out_expected_prev[12];
	end
	if (
		( data_out_expected_prev[13] !== 1'bx ) && ( data_out_prev[13] !== data_out_expected_prev[13] )
		&& ((data_out_expected_prev[13] !== last_data_out_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[13] = data_out_expected_prev[13];
	end
	if (
		( data_out_expected_prev[14] !== 1'bx ) && ( data_out_prev[14] !== data_out_expected_prev[14] )
		&& ((data_out_expected_prev[14] !== last_data_out_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[14] = data_out_expected_prev[14];
	end
	if (
		( data_out_expected_prev[15] !== 1'bx ) && ( data_out_prev[15] !== data_out_expected_prev[15] )
		&& ((data_out_expected_prev[15] !== last_data_out_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[15] = data_out_expected_prev[15];
	end
	if (
		( delayReq_expected_prev !== 1'bx ) && ( delayReq_prev !== delayReq_expected_prev )
		&& ((delayReq_expected_prev !== last_delayReq_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port delayReq :: @time = %t",  $realtime);
		$display ("     Expected value = %b", delayReq_expected_prev);
		$display ("     Real value = %b", delayReq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_delayReq_exp = delayReq_expected_prev;
	end
	if (
		( done_cache_expected_prev !== 1'bx ) && ( done_cache_prev !== done_cache_expected_prev )
		&& ((done_cache_expected_prev !== last_done_cache_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done_cache :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done_cache_expected_prev);
		$display ("     Real value = %b", done_cache_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_done_cache_exp = done_cache_expected_prev;
	end
	if (
		( done_check_d_expected_prev !== 1'bx ) && ( done_check_d_prev !== done_check_d_expected_prev )
		&& ((done_check_d_expected_prev !== last_done_check_d_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done_check_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done_check_d_expected_prev);
		$display ("     Real value = %b", done_check_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_done_check_d_exp = done_check_d_expected_prev;
	end
	if (
		( done_controller_d_expected_prev !== 1'bx ) && ( done_controller_d_prev !== done_controller_d_expected_prev )
		&& ((done_controller_d_expected_prev !== last_done_controller_d_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done_controller_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done_controller_d_expected_prev);
		$display ("     Real value = %b", done_controller_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_done_controller_d_exp = done_controller_d_expected_prev;
	end
	if (
		( done_write_back_d_expected_prev !== 1'bx ) && ( done_write_back_d_prev !== done_write_back_d_expected_prev )
		&& ((done_write_back_d_expected_prev !== last_done_write_back_d_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done_write_back_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done_write_back_d_expected_prev);
		$display ("     Real value = %b", done_write_back_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_done_write_back_d_exp = done_write_back_d_expected_prev;
	end
	if (
		( mem_block_out_d_expected_prev[0] !== 1'bx ) && ( mem_block_out_d_prev[0] !== mem_block_out_d_expected_prev[0] )
		&& ((mem_block_out_d_expected_prev[0] !== last_mem_block_out_d_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[0] = mem_block_out_d_expected_prev[0];
	end
	if (
		( mem_block_out_d_expected_prev[1] !== 1'bx ) && ( mem_block_out_d_prev[1] !== mem_block_out_d_expected_prev[1] )
		&& ((mem_block_out_d_expected_prev[1] !== last_mem_block_out_d_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[1] = mem_block_out_d_expected_prev[1];
	end
	if (
		( mem_block_out_d_expected_prev[2] !== 1'bx ) && ( mem_block_out_d_prev[2] !== mem_block_out_d_expected_prev[2] )
		&& ((mem_block_out_d_expected_prev[2] !== last_mem_block_out_d_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[2] = mem_block_out_d_expected_prev[2];
	end
	if (
		( mem_block_out_d_expected_prev[3] !== 1'bx ) && ( mem_block_out_d_prev[3] !== mem_block_out_d_expected_prev[3] )
		&& ((mem_block_out_d_expected_prev[3] !== last_mem_block_out_d_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[3] = mem_block_out_d_expected_prev[3];
	end
	if (
		( mem_block_out_d_expected_prev[4] !== 1'bx ) && ( mem_block_out_d_prev[4] !== mem_block_out_d_expected_prev[4] )
		&& ((mem_block_out_d_expected_prev[4] !== last_mem_block_out_d_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[4] = mem_block_out_d_expected_prev[4];
	end
	if (
		( mem_block_out_d_expected_prev[5] !== 1'bx ) && ( mem_block_out_d_prev[5] !== mem_block_out_d_expected_prev[5] )
		&& ((mem_block_out_d_expected_prev[5] !== last_mem_block_out_d_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[5] = mem_block_out_d_expected_prev[5];
	end
	if (
		( mem_block_out_d_expected_prev[6] !== 1'bx ) && ( mem_block_out_d_prev[6] !== mem_block_out_d_expected_prev[6] )
		&& ((mem_block_out_d_expected_prev[6] !== last_mem_block_out_d_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[6] = mem_block_out_d_expected_prev[6];
	end
	if (
		( mem_block_out_d_expected_prev[7] !== 1'bx ) && ( mem_block_out_d_prev[7] !== mem_block_out_d_expected_prev[7] )
		&& ((mem_block_out_d_expected_prev[7] !== last_mem_block_out_d_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[7] = mem_block_out_d_expected_prev[7];
	end
	if (
		( mem_block_out_d_expected_prev[8] !== 1'bx ) && ( mem_block_out_d_prev[8] !== mem_block_out_d_expected_prev[8] )
		&& ((mem_block_out_d_expected_prev[8] !== last_mem_block_out_d_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[8] = mem_block_out_d_expected_prev[8];
	end
	if (
		( mem_block_out_d_expected_prev[9] !== 1'bx ) && ( mem_block_out_d_prev[9] !== mem_block_out_d_expected_prev[9] )
		&& ((mem_block_out_d_expected_prev[9] !== last_mem_block_out_d_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[9] = mem_block_out_d_expected_prev[9];
	end
	if (
		( mem_block_out_d_expected_prev[10] !== 1'bx ) && ( mem_block_out_d_prev[10] !== mem_block_out_d_expected_prev[10] )
		&& ((mem_block_out_d_expected_prev[10] !== last_mem_block_out_d_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[10] = mem_block_out_d_expected_prev[10];
	end
	if (
		( mem_block_out_d_expected_prev[11] !== 1'bx ) && ( mem_block_out_d_prev[11] !== mem_block_out_d_expected_prev[11] )
		&& ((mem_block_out_d_expected_prev[11] !== last_mem_block_out_d_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[11] = mem_block_out_d_expected_prev[11];
	end
	if (
		( mem_block_out_d_expected_prev[12] !== 1'bx ) && ( mem_block_out_d_prev[12] !== mem_block_out_d_expected_prev[12] )
		&& ((mem_block_out_d_expected_prev[12] !== last_mem_block_out_d_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[12] = mem_block_out_d_expected_prev[12];
	end
	if (
		( mem_block_out_d_expected_prev[13] !== 1'bx ) && ( mem_block_out_d_prev[13] !== mem_block_out_d_expected_prev[13] )
		&& ((mem_block_out_d_expected_prev[13] !== last_mem_block_out_d_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[13] = mem_block_out_d_expected_prev[13];
	end
	if (
		( mem_block_out_d_expected_prev[14] !== 1'bx ) && ( mem_block_out_d_prev[14] !== mem_block_out_d_expected_prev[14] )
		&& ((mem_block_out_d_expected_prev[14] !== last_mem_block_out_d_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[14] = mem_block_out_d_expected_prev[14];
	end
	if (
		( mem_block_out_d_expected_prev[15] !== 1'bx ) && ( mem_block_out_d_prev[15] !== mem_block_out_d_expected_prev[15] )
		&& ((mem_block_out_d_expected_prev[15] !== last_mem_block_out_d_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[15] = mem_block_out_d_expected_prev[15];
	end
	if (
		( mem_block_out_d_expected_prev[16] !== 1'bx ) && ( mem_block_out_d_prev[16] !== mem_block_out_d_expected_prev[16] )
		&& ((mem_block_out_d_expected_prev[16] !== last_mem_block_out_d_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[16] = mem_block_out_d_expected_prev[16];
	end
	if (
		( mem_block_out_d_expected_prev[17] !== 1'bx ) && ( mem_block_out_d_prev[17] !== mem_block_out_d_expected_prev[17] )
		&& ((mem_block_out_d_expected_prev[17] !== last_mem_block_out_d_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[17] = mem_block_out_d_expected_prev[17];
	end
	if (
		( mem_block_out_d_expected_prev[18] !== 1'bx ) && ( mem_block_out_d_prev[18] !== mem_block_out_d_expected_prev[18] )
		&& ((mem_block_out_d_expected_prev[18] !== last_mem_block_out_d_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[18] = mem_block_out_d_expected_prev[18];
	end
	if (
		( mem_block_out_d_expected_prev[19] !== 1'bx ) && ( mem_block_out_d_prev[19] !== mem_block_out_d_expected_prev[19] )
		&& ((mem_block_out_d_expected_prev[19] !== last_mem_block_out_d_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[19] = mem_block_out_d_expected_prev[19];
	end
	if (
		( mem_block_out_d_expected_prev[20] !== 1'bx ) && ( mem_block_out_d_prev[20] !== mem_block_out_d_expected_prev[20] )
		&& ((mem_block_out_d_expected_prev[20] !== last_mem_block_out_d_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[20] = mem_block_out_d_expected_prev[20];
	end
	if (
		( mem_block_out_d_expected_prev[21] !== 1'bx ) && ( mem_block_out_d_prev[21] !== mem_block_out_d_expected_prev[21] )
		&& ((mem_block_out_d_expected_prev[21] !== last_mem_block_out_d_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[21] = mem_block_out_d_expected_prev[21];
	end
	if (
		( mem_block_out_d_expected_prev[22] !== 1'bx ) && ( mem_block_out_d_prev[22] !== mem_block_out_d_expected_prev[22] )
		&& ((mem_block_out_d_expected_prev[22] !== last_mem_block_out_d_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[22] = mem_block_out_d_expected_prev[22];
	end
	if (
		( mem_block_out_d_expected_prev[23] !== 1'bx ) && ( mem_block_out_d_prev[23] !== mem_block_out_d_expected_prev[23] )
		&& ((mem_block_out_d_expected_prev[23] !== last_mem_block_out_d_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[23] = mem_block_out_d_expected_prev[23];
	end
	if (
		( mem_block_out_d_expected_prev[24] !== 1'bx ) && ( mem_block_out_d_prev[24] !== mem_block_out_d_expected_prev[24] )
		&& ((mem_block_out_d_expected_prev[24] !== last_mem_block_out_d_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[24] = mem_block_out_d_expected_prev[24];
	end
	if (
		( mem_block_out_d_expected_prev[25] !== 1'bx ) && ( mem_block_out_d_prev[25] !== mem_block_out_d_expected_prev[25] )
		&& ((mem_block_out_d_expected_prev[25] !== last_mem_block_out_d_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[25] = mem_block_out_d_expected_prev[25];
	end
	if (
		( mem_block_out_d_expected_prev[26] !== 1'bx ) && ( mem_block_out_d_prev[26] !== mem_block_out_d_expected_prev[26] )
		&& ((mem_block_out_d_expected_prev[26] !== last_mem_block_out_d_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[26] = mem_block_out_d_expected_prev[26];
	end
	if (
		( mem_block_out_d_expected_prev[27] !== 1'bx ) && ( mem_block_out_d_prev[27] !== mem_block_out_d_expected_prev[27] )
		&& ((mem_block_out_d_expected_prev[27] !== last_mem_block_out_d_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[27] = mem_block_out_d_expected_prev[27];
	end
	if (
		( mem_block_out_d_expected_prev[28] !== 1'bx ) && ( mem_block_out_d_prev[28] !== mem_block_out_d_expected_prev[28] )
		&& ((mem_block_out_d_expected_prev[28] !== last_mem_block_out_d_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[28] = mem_block_out_d_expected_prev[28];
	end
	if (
		( mem_block_out_d_expected_prev[29] !== 1'bx ) && ( mem_block_out_d_prev[29] !== mem_block_out_d_expected_prev[29] )
		&& ((mem_block_out_d_expected_prev[29] !== last_mem_block_out_d_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[29] = mem_block_out_d_expected_prev[29];
	end
	if (
		( mem_block_out_d_expected_prev[30] !== 1'bx ) && ( mem_block_out_d_prev[30] !== mem_block_out_d_expected_prev[30] )
		&& ((mem_block_out_d_expected_prev[30] !== last_mem_block_out_d_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[30] = mem_block_out_d_expected_prev[30];
	end
	if (
		( mem_block_out_d_expected_prev[31] !== 1'bx ) && ( mem_block_out_d_prev[31] !== mem_block_out_d_expected_prev[31] )
		&& ((mem_block_out_d_expected_prev[31] !== last_mem_block_out_d_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[31] = mem_block_out_d_expected_prev[31];
	end
	if (
		( mem_block_out_d_expected_prev[32] !== 1'bx ) && ( mem_block_out_d_prev[32] !== mem_block_out_d_expected_prev[32] )
		&& ((mem_block_out_d_expected_prev[32] !== last_mem_block_out_d_exp[32]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[32] = mem_block_out_d_expected_prev[32];
	end
	if (
		( mem_block_out_d_expected_prev[33] !== 1'bx ) && ( mem_block_out_d_prev[33] !== mem_block_out_d_expected_prev[33] )
		&& ((mem_block_out_d_expected_prev[33] !== last_mem_block_out_d_exp[33]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[33] = mem_block_out_d_expected_prev[33];
	end
	if (
		( mem_block_out_d_expected_prev[34] !== 1'bx ) && ( mem_block_out_d_prev[34] !== mem_block_out_d_expected_prev[34] )
		&& ((mem_block_out_d_expected_prev[34] !== last_mem_block_out_d_exp[34]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[34] = mem_block_out_d_expected_prev[34];
	end
	if (
		( mem_block_out_d_expected_prev[35] !== 1'bx ) && ( mem_block_out_d_prev[35] !== mem_block_out_d_expected_prev[35] )
		&& ((mem_block_out_d_expected_prev[35] !== last_mem_block_out_d_exp[35]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[35] = mem_block_out_d_expected_prev[35];
	end
	if (
		( mem_block_out_d_expected_prev[36] !== 1'bx ) && ( mem_block_out_d_prev[36] !== mem_block_out_d_expected_prev[36] )
		&& ((mem_block_out_d_expected_prev[36] !== last_mem_block_out_d_exp[36]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[36] = mem_block_out_d_expected_prev[36];
	end
	if (
		( mem_block_out_d_expected_prev[37] !== 1'bx ) && ( mem_block_out_d_prev[37] !== mem_block_out_d_expected_prev[37] )
		&& ((mem_block_out_d_expected_prev[37] !== last_mem_block_out_d_exp[37]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[37] = mem_block_out_d_expected_prev[37];
	end
	if (
		( mem_block_out_d_expected_prev[38] !== 1'bx ) && ( mem_block_out_d_prev[38] !== mem_block_out_d_expected_prev[38] )
		&& ((mem_block_out_d_expected_prev[38] !== last_mem_block_out_d_exp[38]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[38] = mem_block_out_d_expected_prev[38];
	end
	if (
		( mem_block_out_d_expected_prev[39] !== 1'bx ) && ( mem_block_out_d_prev[39] !== mem_block_out_d_expected_prev[39] )
		&& ((mem_block_out_d_expected_prev[39] !== last_mem_block_out_d_exp[39]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[39] = mem_block_out_d_expected_prev[39];
	end
	if (
		( mem_block_out_d_expected_prev[40] !== 1'bx ) && ( mem_block_out_d_prev[40] !== mem_block_out_d_expected_prev[40] )
		&& ((mem_block_out_d_expected_prev[40] !== last_mem_block_out_d_exp[40]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[40] = mem_block_out_d_expected_prev[40];
	end
	if (
		( mem_block_out_d_expected_prev[41] !== 1'bx ) && ( mem_block_out_d_prev[41] !== mem_block_out_d_expected_prev[41] )
		&& ((mem_block_out_d_expected_prev[41] !== last_mem_block_out_d_exp[41]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[41] = mem_block_out_d_expected_prev[41];
	end
	if (
		( mem_block_out_d_expected_prev[42] !== 1'bx ) && ( mem_block_out_d_prev[42] !== mem_block_out_d_expected_prev[42] )
		&& ((mem_block_out_d_expected_prev[42] !== last_mem_block_out_d_exp[42]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[42] = mem_block_out_d_expected_prev[42];
	end
	if (
		( mem_block_out_d_expected_prev[43] !== 1'bx ) && ( mem_block_out_d_prev[43] !== mem_block_out_d_expected_prev[43] )
		&& ((mem_block_out_d_expected_prev[43] !== last_mem_block_out_d_exp[43]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[43] = mem_block_out_d_expected_prev[43];
	end
	if (
		( mem_block_out_d_expected_prev[44] !== 1'bx ) && ( mem_block_out_d_prev[44] !== mem_block_out_d_expected_prev[44] )
		&& ((mem_block_out_d_expected_prev[44] !== last_mem_block_out_d_exp[44]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[44] = mem_block_out_d_expected_prev[44];
	end
	if (
		( mem_block_out_d_expected_prev[45] !== 1'bx ) && ( mem_block_out_d_prev[45] !== mem_block_out_d_expected_prev[45] )
		&& ((mem_block_out_d_expected_prev[45] !== last_mem_block_out_d_exp[45]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[45] = mem_block_out_d_expected_prev[45];
	end
	if (
		( mem_block_out_d_expected_prev[46] !== 1'bx ) && ( mem_block_out_d_prev[46] !== mem_block_out_d_expected_prev[46] )
		&& ((mem_block_out_d_expected_prev[46] !== last_mem_block_out_d_exp[46]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[46] = mem_block_out_d_expected_prev[46];
	end
	if (
		( mem_block_out_d_expected_prev[47] !== 1'bx ) && ( mem_block_out_d_prev[47] !== mem_block_out_d_expected_prev[47] )
		&& ((mem_block_out_d_expected_prev[47] !== last_mem_block_out_d_exp[47]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[47] = mem_block_out_d_expected_prev[47];
	end
	if (
		( mem_block_out_d_expected_prev[48] !== 1'bx ) && ( mem_block_out_d_prev[48] !== mem_block_out_d_expected_prev[48] )
		&& ((mem_block_out_d_expected_prev[48] !== last_mem_block_out_d_exp[48]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[48] = mem_block_out_d_expected_prev[48];
	end
	if (
		( mem_block_out_d_expected_prev[49] !== 1'bx ) && ( mem_block_out_d_prev[49] !== mem_block_out_d_expected_prev[49] )
		&& ((mem_block_out_d_expected_prev[49] !== last_mem_block_out_d_exp[49]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[49] = mem_block_out_d_expected_prev[49];
	end
	if (
		( mem_block_out_d_expected_prev[50] !== 1'bx ) && ( mem_block_out_d_prev[50] !== mem_block_out_d_expected_prev[50] )
		&& ((mem_block_out_d_expected_prev[50] !== last_mem_block_out_d_exp[50]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[50] = mem_block_out_d_expected_prev[50];
	end
	if (
		( mem_block_out_d_expected_prev[51] !== 1'bx ) && ( mem_block_out_d_prev[51] !== mem_block_out_d_expected_prev[51] )
		&& ((mem_block_out_d_expected_prev[51] !== last_mem_block_out_d_exp[51]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[51] = mem_block_out_d_expected_prev[51];
	end
	if (
		( mem_block_out_d_expected_prev[52] !== 1'bx ) && ( mem_block_out_d_prev[52] !== mem_block_out_d_expected_prev[52] )
		&& ((mem_block_out_d_expected_prev[52] !== last_mem_block_out_d_exp[52]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[52] = mem_block_out_d_expected_prev[52];
	end
	if (
		( mem_block_out_d_expected_prev[53] !== 1'bx ) && ( mem_block_out_d_prev[53] !== mem_block_out_d_expected_prev[53] )
		&& ((mem_block_out_d_expected_prev[53] !== last_mem_block_out_d_exp[53]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[53] = mem_block_out_d_expected_prev[53];
	end
	if (
		( mem_block_out_d_expected_prev[54] !== 1'bx ) && ( mem_block_out_d_prev[54] !== mem_block_out_d_expected_prev[54] )
		&& ((mem_block_out_d_expected_prev[54] !== last_mem_block_out_d_exp[54]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[54] = mem_block_out_d_expected_prev[54];
	end
	if (
		( mem_block_out_d_expected_prev[55] !== 1'bx ) && ( mem_block_out_d_prev[55] !== mem_block_out_d_expected_prev[55] )
		&& ((mem_block_out_d_expected_prev[55] !== last_mem_block_out_d_exp[55]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[55] = mem_block_out_d_expected_prev[55];
	end
	if (
		( mem_block_out_d_expected_prev[56] !== 1'bx ) && ( mem_block_out_d_prev[56] !== mem_block_out_d_expected_prev[56] )
		&& ((mem_block_out_d_expected_prev[56] !== last_mem_block_out_d_exp[56]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[56] = mem_block_out_d_expected_prev[56];
	end
	if (
		( mem_block_out_d_expected_prev[57] !== 1'bx ) && ( mem_block_out_d_prev[57] !== mem_block_out_d_expected_prev[57] )
		&& ((mem_block_out_d_expected_prev[57] !== last_mem_block_out_d_exp[57]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[57] = mem_block_out_d_expected_prev[57];
	end
	if (
		( mem_block_out_d_expected_prev[58] !== 1'bx ) && ( mem_block_out_d_prev[58] !== mem_block_out_d_expected_prev[58] )
		&& ((mem_block_out_d_expected_prev[58] !== last_mem_block_out_d_exp[58]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[58] = mem_block_out_d_expected_prev[58];
	end
	if (
		( mem_block_out_d_expected_prev[59] !== 1'bx ) && ( mem_block_out_d_prev[59] !== mem_block_out_d_expected_prev[59] )
		&& ((mem_block_out_d_expected_prev[59] !== last_mem_block_out_d_exp[59]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[59] = mem_block_out_d_expected_prev[59];
	end
	if (
		( mem_block_out_d_expected_prev[60] !== 1'bx ) && ( mem_block_out_d_prev[60] !== mem_block_out_d_expected_prev[60] )
		&& ((mem_block_out_d_expected_prev[60] !== last_mem_block_out_d_exp[60]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[60] = mem_block_out_d_expected_prev[60];
	end
	if (
		( mem_block_out_d_expected_prev[61] !== 1'bx ) && ( mem_block_out_d_prev[61] !== mem_block_out_d_expected_prev[61] )
		&& ((mem_block_out_d_expected_prev[61] !== last_mem_block_out_d_exp[61]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[61] = mem_block_out_d_expected_prev[61];
	end
	if (
		( mem_block_out_d_expected_prev[62] !== 1'bx ) && ( mem_block_out_d_prev[62] !== mem_block_out_d_expected_prev[62] )
		&& ((mem_block_out_d_expected_prev[62] !== last_mem_block_out_d_exp[62]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[62] = mem_block_out_d_expected_prev[62];
	end
	if (
		( mem_block_out_d_expected_prev[63] !== 1'bx ) && ( mem_block_out_d_prev[63] !== mem_block_out_d_expected_prev[63] )
		&& ((mem_block_out_d_expected_prev[63] !== last_mem_block_out_d_exp[63]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_block_out_d[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_block_out_d_expected_prev);
		$display ("     Real value = %b", mem_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mem_block_out_d_exp[63] = mem_block_out_d_expected_prev[63];
	end
	if (
		( replaceStatusIn_d_expected_prev !== 1'bx ) && ( replaceStatusIn_d_prev !== replaceStatusIn_d_expected_prev )
		&& ((replaceStatusIn_d_expected_prev !== last_replaceStatusIn_d_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port replaceStatusIn_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", replaceStatusIn_d_expected_prev);
		$display ("     Real value = %b", replaceStatusIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_replaceStatusIn_d_exp = replaceStatusIn_d_expected_prev;
	end
	if (
		( replaceStatusOut_d_expected_prev !== 1'bx ) && ( replaceStatusOut_d_prev !== replaceStatusOut_d_expected_prev )
		&& ((replaceStatusOut_d_expected_prev !== last_replaceStatusOut_d_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port replaceStatusOut_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", replaceStatusOut_d_expected_prev);
		$display ("     Real value = %b", replaceStatusOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_replaceStatusOut_d_exp = replaceStatusOut_d_expected_prev;
	end
	if (
		( slowClock_d_expected_prev !== 1'bx ) && ( slowClock_d_prev !== slowClock_d_expected_prev )
		&& ((slowClock_d_expected_prev !== last_slowClock_d_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port slowClock_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", slowClock_d_expected_prev);
		$display ("     Real value = %b", slowClock_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_slowClock_d_exp = slowClock_d_expected_prev;
	end
	if (
		( state_con_d_expected_prev[0] !== 1'bx ) && ( state_con_d_prev[0] !== state_con_d_expected_prev[0] )
		&& ((state_con_d_expected_prev[0] !== last_state_con_d_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_con_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_con_d_expected_prev);
		$display ("     Real value = %b", state_con_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_state_con_d_exp[0] = state_con_d_expected_prev[0];
	end
	if (
		( state_con_d_expected_prev[1] !== 1'bx ) && ( state_con_d_prev[1] !== state_con_d_expected_prev[1] )
		&& ((state_con_d_expected_prev[1] !== last_state_con_d_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_con_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_con_d_expected_prev);
		$display ("     Real value = %b", state_con_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_state_con_d_exp[1] = state_con_d_expected_prev[1];
	end
	if (
		( state_con_d_expected_prev[2] !== 1'bx ) && ( state_con_d_prev[2] !== state_con_d_expected_prev[2] )
		&& ((state_con_d_expected_prev[2] !== last_state_con_d_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_con_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_con_d_expected_prev);
		$display ("     Real value = %b", state_con_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_state_con_d_exp[2] = state_con_d_expected_prev[2];
	end
	if (
		( state_con_d_expected_prev[3] !== 1'bx ) && ( state_con_d_prev[3] !== state_con_d_expected_prev[3] )
		&& ((state_con_d_expected_prev[3] !== last_state_con_d_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_con_d[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_con_d_expected_prev);
		$display ("     Real value = %b", state_con_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_state_con_d_exp[3] = state_con_d_expected_prev[3];
	end
	if (
		( state_d_expected_prev[0] !== 1'bx ) && ( state_d_prev[0] !== state_d_expected_prev[0] )
		&& ((state_d_expected_prev[0] !== last_state_d_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_d_expected_prev);
		$display ("     Real value = %b", state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_state_d_exp[0] = state_d_expected_prev[0];
	end
	if (
		( state_d_expected_prev[1] !== 1'bx ) && ( state_d_prev[1] !== state_d_expected_prev[1] )
		&& ((state_d_expected_prev[1] !== last_state_d_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_d_expected_prev);
		$display ("     Real value = %b", state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_state_d_exp[1] = state_d_expected_prev[1];
	end
	if (
		( state_d_expected_prev[2] !== 1'bx ) && ( state_d_prev[2] !== state_d_expected_prev[2] )
		&& ((state_d_expected_prev[2] !== last_state_d_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_d_expected_prev);
		$display ("     Real value = %b", state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_state_d_exp[2] = state_d_expected_prev[2];
	end
	if (
		( state_d_expected_prev[3] !== 1'bx ) && ( state_d_prev[3] !== state_d_expected_prev[3] )
		&& ((state_d_expected_prev[3] !== last_state_d_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_d[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_d_expected_prev);
		$display ("     Real value = %b", state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_state_d_exp[3] = state_d_expected_prev[3];
	end
	if (
		( write_back_mem_d_expected_prev !== 1'bx ) && ( write_back_mem_d_prev !== write_back_mem_d_expected_prev )
		&& ((write_back_mem_d_expected_prev !== last_write_back_mem_d_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_mem_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_mem_d_expected_prev);
		$display ("     Real value = %b", write_back_mem_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_back_mem_d_exp = write_back_mem_d_expected_prev;
	end
	if (
		( write_block_d_expected_prev !== 1'bx ) && ( write_block_d_prev !== write_block_d_expected_prev )
		&& ((write_block_d_expected_prev !== last_write_block_d_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_block_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_block_d_expected_prev);
		$display ("     Real value = %b", write_block_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_write_block_d_exp = write_block_d_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#5000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Cache_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [11:0] address;
reg cache_en;
reg clock;
reg [15:0] data_in;
reg Mre;
reg Mwe;
reg reset;
// wires                                               
wire [63:0] cont_out_block;
wire controller_en_d;
wire [15:0] data_out;
wire delayReq;
wire done_cache;
wire done_check_d;
wire done_controller_d;
wire done_write_back_d;
wire [63:0] mem_block_out_d;
wire replaceStatusIn_d;
wire replaceStatusOut_d;
wire slowClock_d;
wire [3:0] state_con_d;
wire [3:0] state_d;
wire [9:0] write_address_mem_d;
wire write_back_mem_d;
wire write_block_d;

wire sampler;                             

// assign statements (if any)                          
Cache i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.cache_en(cache_en),
	.clock(clock),
	.cont_out_block(cont_out_block),
	.controller_en_d(controller_en_d),
	.data_in(data_in),
	.data_out(data_out),
	.delayReq(delayReq),
	.done_cache(done_cache),
	.done_check_d(done_check_d),
	.done_controller_d(done_controller_d),
	.done_write_back_d(done_write_back_d),
	.mem_block_out_d(mem_block_out_d),
	.Mre(Mre),
	.Mwe(Mwe),
	.replaceStatusIn_d(replaceStatusIn_d),
	.replaceStatusOut_d(replaceStatusOut_d),
	.reset(reset),
	.slowClock_d(slowClock_d),
	.state_con_d(state_con_d),
	.state_d(state_d),
	.write_address_mem_d(write_address_mem_d),
	.write_back_mem_d(write_back_mem_d),
	.write_block_d(write_block_d)
);
// address[ 11 ]
initial
begin
	address[11] = 1'b0;
end 
// address[ 10 ]
initial
begin
	address[10] = 1'b0;
end 
// address[ 9 ]
initial
begin
	address[9] = 1'b0;
end 
// address[ 8 ]
initial
begin
	address[8] = 1'b0;
end 
// address[ 7 ]
initial
begin
	address[7] = 1'b0;
end 
// address[ 6 ]
initial
begin
	address[6] = 1'b0;
	address[6] = #1130000 1'b1;
	address[6] = #690000 1'b0;
end 
// address[ 5 ]
initial
begin
	address[5] = 1'b0;
	address[5] = #370000 1'b1;
	address[5] = #1450000 1'b0;
	address[5] = #800000 1'b1;
	address[5] = #1580000 1'b0;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b0;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b0;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b1;
	address[2] = #4200000 1'b0;
end 
// address[ 1 ]
initial
begin
	address[1] = 1'b1;
	address[1] = #4200000 1'b0;
end 
// address[ 0 ]
initial
begin
	address[0] = 1'b1;
	address[0] = #4200000 1'b0;
end 

// cache_en
initial
begin
	cache_en = 1'b0;
	cache_en = #50000 1'b1;
	cache_en = #80000 1'b0;
	cache_en = #50000 1'b1;
	cache_en = #130000 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// data_in[ 15 ]
initial
begin
	data_in[15] = 1'b1;
	data_in[15] = #630000 1'b0;
	data_in[15] = #1650000 1'b1;
	data_in[15] = #860000 1'b0;
end 
// data_in[ 14 ]
initial
begin
	data_in[14] = 1'b1;
	data_in[14] = #630000 1'b0;
	data_in[14] = #1650000 1'b1;
	data_in[14] = #860000 1'b0;
end 
// data_in[ 13 ]
initial
begin
	data_in[13] = 1'b1;
	data_in[13] = #630000 1'b0;
	data_in[13] = #1650000 1'b1;
	data_in[13] = #860000 1'b0;
end 
// data_in[ 12 ]
initial
begin
	data_in[12] = 1'b1;
	data_in[12] = #630000 1'b0;
end 
// data_in[ 11 ]
initial
begin
	data_in[11] = 1'b1;
	data_in[11] = #630000 1'b0;
	data_in[11] = #1650000 1'b1;
	data_in[11] = #860000 1'b0;
end 
// data_in[ 10 ]
initial
begin
	data_in[10] = 1'b1;
	data_in[10] = #630000 1'b0;
	data_in[10] = #1650000 1'b1;
	data_in[10] = #860000 1'b0;
end 
// data_in[ 9 ]
initial
begin
	data_in[9] = 1'b1;
	data_in[9] = #630000 1'b0;
	data_in[9] = #1650000 1'b1;
	data_in[9] = #860000 1'b0;
end 
// data_in[ 8 ]
initial
begin
	data_in[8] = 1'b1;
	data_in[8] = #630000 1'b0;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b1;
	data_in[7] = #630000 1'b0;
	data_in[7] = #1650000 1'b1;
	data_in[7] = #860000 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b1;
	data_in[6] = #630000 1'b0;
	data_in[6] = #1650000 1'b1;
	data_in[6] = #860000 1'b0;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b1;
	data_in[5] = #630000 1'b0;
	data_in[5] = #1650000 1'b1;
	data_in[5] = #860000 1'b0;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b1;
	data_in[4] = #630000 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b1;
	data_in[3] = #630000 1'b0;
	data_in[3] = #1650000 1'b1;
	data_in[3] = #860000 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b1;
	data_in[2] = #630000 1'b0;
	data_in[2] = #1650000 1'b1;
	data_in[2] = #860000 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b1;
	data_in[1] = #630000 1'b0;
	data_in[1] = #1650000 1'b1;
	data_in[1] = #860000 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b1;
	data_in[0] = #630000 1'b0;
end 

// Mre
initial
begin
	Mre = 1'b0;
	Mre = #230000 1'b1;
	Mre = #60000 1'b0;
	Mre = #100000 1'b1;
	Mre = #60000 1'b0;
	Mre = #740000 1'b1;
	Mre = #60000 1'b0;
	Mre = #680000 1'b1;
	Mre = #60000 1'b0;
	Mre = #500000 1'b1;
	Mre = #60000 1'b0;
	Mre = #100000 1'b1;
	Mre = #60000 1'b0;
end 

// Mwe
initial
begin
	Mwe = 1'b0;
	Mwe = #70000 1'b1;
	Mwe = #60000 1'b0;
	Mwe = #2260000 1'b1;
	Mwe = #60000 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #40000 1'b0;
end 

Cache_vlg_sample_tst tb_sample (
	.address(address),
	.cache_en(cache_en),
	.clock(clock),
	.data_in(data_in),
	.Mre(Mre),
	.Mwe(Mwe),
	.reset(reset),
	.sampler_tx(sampler)
);

Cache_vlg_check_tst tb_out(
	.cont_out_block(cont_out_block),
	.controller_en_d(controller_en_d),
	.data_out(data_out),
	.delayReq(delayReq),
	.done_cache(done_cache),
	.done_check_d(done_check_d),
	.done_controller_d(done_controller_d),
	.done_write_back_d(done_write_back_d),
	.mem_block_out_d(mem_block_out_d),
	.replaceStatusIn_d(replaceStatusIn_d),
	.replaceStatusOut_d(replaceStatusOut_d),
	.slowClock_d(slowClock_d),
	.state_con_d(state_con_d),
	.state_d(state_d),
	.write_address_mem_d(write_address_mem_d),
	.write_back_mem_d(write_back_mem_d),
	.write_block_d(write_block_d),
	.sampler_rx(sampler)
);
endmodule

