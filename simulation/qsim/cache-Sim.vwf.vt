// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/21/2016 20:05:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Cache
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Cache_vlg_sample_tst(
	address,
	cache_en,
	clock,
	data_in,
	Mre,
	Mwe,
	reset,
	sampler_tx
);
input [11:0] address;
input  cache_en;
input  clock;
input [15:0] data_in;
input  Mre;
input  Mwe;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(address or cache_en or clock or data_in or Mre or Mwe or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Cache_vlg_check_tst (
	controller_en_d,
	data_out,
	delayReq,
	done_cache,
	done_check_d,
	done_controller_d,
	state_con_d,
	state_d,
	sampler_rx
);
input  controller_en_d;
input [15:0] data_out;
input  delayReq;
input  done_cache;
input  done_check_d;
input  done_controller_d;
input [3:0] state_con_d;
input [3:0] state_d;
input sampler_rx;

reg  controller_en_d_expected;
reg [15:0] data_out_expected;
reg  delayReq_expected;
reg  done_cache_expected;
reg  done_check_d_expected;
reg  done_controller_d_expected;
reg [3:0] state_con_d_expected;
reg [3:0] state_d_expected;

reg  controller_en_d_prev;
reg [15:0] data_out_prev;
reg  delayReq_prev;
reg  done_cache_prev;
reg  done_check_d_prev;
reg  done_controller_d_prev;
reg [3:0] state_con_d_prev;
reg [3:0] state_d_prev;

reg  controller_en_d_expected_prev;
reg [15:0] data_out_expected_prev;
reg  delayReq_expected_prev;
reg  done_cache_expected_prev;
reg  done_check_d_expected_prev;
reg  done_controller_d_expected_prev;
reg [3:0] state_con_d_expected_prev;
reg [3:0] state_d_expected_prev;

reg  last_controller_en_d_exp;
reg [15:0] last_data_out_exp;
reg  last_delayReq_exp;
reg  last_done_cache_exp;
reg  last_done_check_d_exp;
reg  last_done_controller_d_exp;
reg [3:0] last_state_con_d_exp;
reg [3:0] last_state_d_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	controller_en_d_prev = controller_en_d;
	data_out_prev = data_out;
	delayReq_prev = delayReq;
	done_cache_prev = done_cache;
	done_check_d_prev = done_check_d;
	done_controller_d_prev = done_controller_d;
	state_con_d_prev = state_con_d;
	state_d_prev = state_d;
end

// update expected /o prevs

always @(trigger)
begin
	controller_en_d_expected_prev = controller_en_d_expected;
	data_out_expected_prev = data_out_expected;
	delayReq_expected_prev = delayReq_expected;
	done_cache_expected_prev = done_cache_expected;
	done_check_d_expected_prev = done_check_d_expected;
	done_controller_d_expected_prev = done_controller_d_expected;
	state_con_d_expected_prev = state_con_d_expected;
	state_d_expected_prev = state_d_expected;
end


// expected data_out[ 15 ]
initial
begin
	data_out_expected[15] = 1'bX;
end 
// expected data_out[ 14 ]
initial
begin
	data_out_expected[14] = 1'bX;
end 
// expected data_out[ 13 ]
initial
begin
	data_out_expected[13] = 1'bX;
end 
// expected data_out[ 12 ]
initial
begin
	data_out_expected[12] = 1'bX;
end 
// expected data_out[ 11 ]
initial
begin
	data_out_expected[11] = 1'bX;
end 
// expected data_out[ 10 ]
initial
begin
	data_out_expected[10] = 1'bX;
end 
// expected data_out[ 9 ]
initial
begin
	data_out_expected[9] = 1'bX;
end 
// expected data_out[ 8 ]
initial
begin
	data_out_expected[8] = 1'bX;
end 
// expected data_out[ 7 ]
initial
begin
	data_out_expected[7] = 1'bX;
end 
// expected data_out[ 6 ]
initial
begin
	data_out_expected[6] = 1'bX;
end 
// expected data_out[ 5 ]
initial
begin
	data_out_expected[5] = 1'bX;
end 
// expected data_out[ 4 ]
initial
begin
	data_out_expected[4] = 1'bX;
end 
// expected data_out[ 3 ]
initial
begin
	data_out_expected[3] = 1'bX;
end 
// expected data_out[ 2 ]
initial
begin
	data_out_expected[2] = 1'bX;
end 
// expected data_out[ 1 ]
initial
begin
	data_out_expected[1] = 1'bX;
end 
// expected data_out[ 0 ]
initial
begin
	data_out_expected[0] = 1'bX;
end 

// expected delayReq
initial
begin
	delayReq_expected = 1'bX;
end 

// expected done_cache
initial
begin
	done_cache_expected = 1'bX;
end 
// expected state_con_d[ 3 ]
initial
begin
	state_con_d_expected[3] = 1'bX;
end 
// expected state_con_d[ 2 ]
initial
begin
	state_con_d_expected[2] = 1'bX;
end 
// expected state_con_d[ 1 ]
initial
begin
	state_con_d_expected[1] = 1'bX;
end 
// expected state_con_d[ 0 ]
initial
begin
	state_con_d_expected[0] = 1'bX;
end 
// expected state_d[ 3 ]
initial
begin
	state_d_expected[3] = 1'bX;
end 
// expected state_d[ 2 ]
initial
begin
	state_d_expected[2] = 1'bX;
end 
// expected state_d[ 1 ]
initial
begin
	state_d_expected[1] = 1'bX;
end 
// expected state_d[ 0 ]
initial
begin
	state_d_expected[0] = 1'bX;
end 

// expected controller_en_d
initial
begin
	controller_en_d_expected = 1'bX;
end 

// expected done_controller_d
initial
begin
	done_controller_d_expected = 1'bX;
end 

// expected done_check_d
initial
begin
	done_check_d_expected = 1'bX;
end 
// generate trigger
always @(controller_en_d_expected or controller_en_d or data_out_expected or data_out or delayReq_expected or delayReq or done_cache_expected or done_cache or done_check_d_expected or done_check_d or done_controller_d_expected or done_controller_d or state_con_d_expected or state_con_d or state_d_expected or state_d)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected controller_en_d = %b | expected data_out = %b | expected delayReq = %b | expected done_cache = %b | expected done_check_d = %b | expected done_controller_d = %b | expected state_con_d = %b | expected state_d = %b | ",controller_en_d_expected_prev,data_out_expected_prev,delayReq_expected_prev,done_cache_expected_prev,done_check_d_expected_prev,done_controller_d_expected_prev,state_con_d_expected_prev,state_d_expected_prev);
	$display("| real controller_en_d = %b | real data_out = %b | real delayReq = %b | real done_cache = %b | real done_check_d = %b | real done_controller_d = %b | real state_con_d = %b | real state_d = %b | ",controller_en_d_prev,data_out_prev,delayReq_prev,done_cache_prev,done_check_d_prev,done_controller_d_prev,state_con_d_prev,state_d_prev);
`endif
	if (
		( controller_en_d_expected_prev !== 1'bx ) && ( controller_en_d_prev !== controller_en_d_expected_prev )
		&& ((controller_en_d_expected_prev !== last_controller_en_d_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controller_en_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controller_en_d_expected_prev);
		$display ("     Real value = %b", controller_en_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_controller_en_d_exp = controller_en_d_expected_prev;
	end
	if (
		( data_out_expected_prev[0] !== 1'bx ) && ( data_out_prev[0] !== data_out_expected_prev[0] )
		&& ((data_out_expected_prev[0] !== last_data_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[0] = data_out_expected_prev[0];
	end
	if (
		( data_out_expected_prev[1] !== 1'bx ) && ( data_out_prev[1] !== data_out_expected_prev[1] )
		&& ((data_out_expected_prev[1] !== last_data_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[1] = data_out_expected_prev[1];
	end
	if (
		( data_out_expected_prev[2] !== 1'bx ) && ( data_out_prev[2] !== data_out_expected_prev[2] )
		&& ((data_out_expected_prev[2] !== last_data_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[2] = data_out_expected_prev[2];
	end
	if (
		( data_out_expected_prev[3] !== 1'bx ) && ( data_out_prev[3] !== data_out_expected_prev[3] )
		&& ((data_out_expected_prev[3] !== last_data_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[3] = data_out_expected_prev[3];
	end
	if (
		( data_out_expected_prev[4] !== 1'bx ) && ( data_out_prev[4] !== data_out_expected_prev[4] )
		&& ((data_out_expected_prev[4] !== last_data_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[4] = data_out_expected_prev[4];
	end
	if (
		( data_out_expected_prev[5] !== 1'bx ) && ( data_out_prev[5] !== data_out_expected_prev[5] )
		&& ((data_out_expected_prev[5] !== last_data_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[5] = data_out_expected_prev[5];
	end
	if (
		( data_out_expected_prev[6] !== 1'bx ) && ( data_out_prev[6] !== data_out_expected_prev[6] )
		&& ((data_out_expected_prev[6] !== last_data_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[6] = data_out_expected_prev[6];
	end
	if (
		( data_out_expected_prev[7] !== 1'bx ) && ( data_out_prev[7] !== data_out_expected_prev[7] )
		&& ((data_out_expected_prev[7] !== last_data_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[7] = data_out_expected_prev[7];
	end
	if (
		( data_out_expected_prev[8] !== 1'bx ) && ( data_out_prev[8] !== data_out_expected_prev[8] )
		&& ((data_out_expected_prev[8] !== last_data_out_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[8] = data_out_expected_prev[8];
	end
	if (
		( data_out_expected_prev[9] !== 1'bx ) && ( data_out_prev[9] !== data_out_expected_prev[9] )
		&& ((data_out_expected_prev[9] !== last_data_out_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[9] = data_out_expected_prev[9];
	end
	if (
		( data_out_expected_prev[10] !== 1'bx ) && ( data_out_prev[10] !== data_out_expected_prev[10] )
		&& ((data_out_expected_prev[10] !== last_data_out_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[10] = data_out_expected_prev[10];
	end
	if (
		( data_out_expected_prev[11] !== 1'bx ) && ( data_out_prev[11] !== data_out_expected_prev[11] )
		&& ((data_out_expected_prev[11] !== last_data_out_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[11] = data_out_expected_prev[11];
	end
	if (
		( data_out_expected_prev[12] !== 1'bx ) && ( data_out_prev[12] !== data_out_expected_prev[12] )
		&& ((data_out_expected_prev[12] !== last_data_out_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[12] = data_out_expected_prev[12];
	end
	if (
		( data_out_expected_prev[13] !== 1'bx ) && ( data_out_prev[13] !== data_out_expected_prev[13] )
		&& ((data_out_expected_prev[13] !== last_data_out_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[13] = data_out_expected_prev[13];
	end
	if (
		( data_out_expected_prev[14] !== 1'bx ) && ( data_out_prev[14] !== data_out_expected_prev[14] )
		&& ((data_out_expected_prev[14] !== last_data_out_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[14] = data_out_expected_prev[14];
	end
	if (
		( data_out_expected_prev[15] !== 1'bx ) && ( data_out_prev[15] !== data_out_expected_prev[15] )
		&& ((data_out_expected_prev[15] !== last_data_out_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[15] = data_out_expected_prev[15];
	end
	if (
		( delayReq_expected_prev !== 1'bx ) && ( delayReq_prev !== delayReq_expected_prev )
		&& ((delayReq_expected_prev !== last_delayReq_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port delayReq :: @time = %t",  $realtime);
		$display ("     Expected value = %b", delayReq_expected_prev);
		$display ("     Real value = %b", delayReq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_delayReq_exp = delayReq_expected_prev;
	end
	if (
		( done_cache_expected_prev !== 1'bx ) && ( done_cache_prev !== done_cache_expected_prev )
		&& ((done_cache_expected_prev !== last_done_cache_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done_cache :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done_cache_expected_prev);
		$display ("     Real value = %b", done_cache_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_done_cache_exp = done_cache_expected_prev;
	end
	if (
		( done_check_d_expected_prev !== 1'bx ) && ( done_check_d_prev !== done_check_d_expected_prev )
		&& ((done_check_d_expected_prev !== last_done_check_d_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done_check_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done_check_d_expected_prev);
		$display ("     Real value = %b", done_check_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_done_check_d_exp = done_check_d_expected_prev;
	end
	if (
		( done_controller_d_expected_prev !== 1'bx ) && ( done_controller_d_prev !== done_controller_d_expected_prev )
		&& ((done_controller_d_expected_prev !== last_done_controller_d_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done_controller_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done_controller_d_expected_prev);
		$display ("     Real value = %b", done_controller_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_done_controller_d_exp = done_controller_d_expected_prev;
	end
	if (
		( state_con_d_expected_prev[0] !== 1'bx ) && ( state_con_d_prev[0] !== state_con_d_expected_prev[0] )
		&& ((state_con_d_expected_prev[0] !== last_state_con_d_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_con_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_con_d_expected_prev);
		$display ("     Real value = %b", state_con_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_con_d_exp[0] = state_con_d_expected_prev[0];
	end
	if (
		( state_con_d_expected_prev[1] !== 1'bx ) && ( state_con_d_prev[1] !== state_con_d_expected_prev[1] )
		&& ((state_con_d_expected_prev[1] !== last_state_con_d_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_con_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_con_d_expected_prev);
		$display ("     Real value = %b", state_con_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_con_d_exp[1] = state_con_d_expected_prev[1];
	end
	if (
		( state_con_d_expected_prev[2] !== 1'bx ) && ( state_con_d_prev[2] !== state_con_d_expected_prev[2] )
		&& ((state_con_d_expected_prev[2] !== last_state_con_d_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_con_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_con_d_expected_prev);
		$display ("     Real value = %b", state_con_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_con_d_exp[2] = state_con_d_expected_prev[2];
	end
	if (
		( state_con_d_expected_prev[3] !== 1'bx ) && ( state_con_d_prev[3] !== state_con_d_expected_prev[3] )
		&& ((state_con_d_expected_prev[3] !== last_state_con_d_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_con_d[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_con_d_expected_prev);
		$display ("     Real value = %b", state_con_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_con_d_exp[3] = state_con_d_expected_prev[3];
	end
	if (
		( state_d_expected_prev[0] !== 1'bx ) && ( state_d_prev[0] !== state_d_expected_prev[0] )
		&& ((state_d_expected_prev[0] !== last_state_d_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_d_expected_prev);
		$display ("     Real value = %b", state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_d_exp[0] = state_d_expected_prev[0];
	end
	if (
		( state_d_expected_prev[1] !== 1'bx ) && ( state_d_prev[1] !== state_d_expected_prev[1] )
		&& ((state_d_expected_prev[1] !== last_state_d_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_d_expected_prev);
		$display ("     Real value = %b", state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_d_exp[1] = state_d_expected_prev[1];
	end
	if (
		( state_d_expected_prev[2] !== 1'bx ) && ( state_d_prev[2] !== state_d_expected_prev[2] )
		&& ((state_d_expected_prev[2] !== last_state_d_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_d_expected_prev);
		$display ("     Real value = %b", state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_d_exp[2] = state_d_expected_prev[2];
	end
	if (
		( state_d_expected_prev[3] !== 1'bx ) && ( state_d_prev[3] !== state_d_expected_prev[3] )
		&& ((state_d_expected_prev[3] !== last_state_d_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_d[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_d_expected_prev);
		$display ("     Real value = %b", state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_d_exp[3] = state_d_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Cache_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [11:0] address;
reg cache_en;
reg clock;
reg [15:0] data_in;
reg Mre;
reg Mwe;
reg reset;
// wires                                               
wire controller_en_d;
wire [15:0] data_out;
wire delayReq;
wire done_cache;
wire done_check_d;
wire done_controller_d;
wire [3:0] state_con_d;
wire [3:0] state_d;

wire sampler;                             

// assign statements (if any)                          
Cache i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.cache_en(cache_en),
	.clock(clock),
	.controller_en_d(controller_en_d),
	.data_in(data_in),
	.data_out(data_out),
	.delayReq(delayReq),
	.done_cache(done_cache),
	.done_check_d(done_check_d),
	.done_controller_d(done_controller_d),
	.Mre(Mre),
	.Mwe(Mwe),
	.reset(reset),
	.state_con_d(state_con_d),
	.state_d(state_d)
);
// address[ 11 ]
initial
begin
	address[11] = 1'b0;
end 
// address[ 10 ]
initial
begin
	address[10] = 1'b0;
end 
// address[ 9 ]
initial
begin
	address[9] = 1'b0;
end 
// address[ 8 ]
initial
begin
	address[8] = 1'b0;
end 
// address[ 7 ]
initial
begin
	address[7] = 1'b0;
end 
// address[ 6 ]
initial
begin
	address[6] = 1'b0;
end 
// address[ 5 ]
initial
begin
	address[5] = 1'b0;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b0;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b0;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b1;
	address[2] = #580000 1'b0;
end 
// address[ 1 ]
initial
begin
	address[1] = 1'b1;
	address[1] = #580000 1'b0;
end 
// address[ 0 ]
initial
begin
	address[0] = 1'b1;
	address[0] = #580000 1'b0;
end 

// cache_en
initial
begin
	cache_en = 1'b0;
	cache_en = #50000 1'b1;
	cache_en = #80000 1'b0;
	cache_en = #50000 1'b1;
	cache_en = #130000 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// data_in[ 15 ]
initial
begin
	data_in[15] = 1'b1;
	data_in[15] = #630000 1'b0;
end 
// data_in[ 14 ]
initial
begin
	data_in[14] = 1'b1;
	data_in[14] = #630000 1'b0;
end 
// data_in[ 13 ]
initial
begin
	data_in[13] = 1'b1;
	data_in[13] = #630000 1'b0;
end 
// data_in[ 12 ]
initial
begin
	data_in[12] = 1'b1;
	data_in[12] = #630000 1'b0;
end 
// data_in[ 11 ]
initial
begin
	data_in[11] = 1'b1;
	data_in[11] = #630000 1'b0;
end 
// data_in[ 10 ]
initial
begin
	data_in[10] = 1'b1;
	data_in[10] = #630000 1'b0;
end 
// data_in[ 9 ]
initial
begin
	data_in[9] = 1'b1;
	data_in[9] = #630000 1'b0;
end 
// data_in[ 8 ]
initial
begin
	data_in[8] = 1'b1;
	data_in[8] = #630000 1'b0;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b1;
	data_in[7] = #630000 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b1;
	data_in[6] = #630000 1'b0;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b1;
	data_in[5] = #630000 1'b0;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b1;
	data_in[4] = #630000 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b1;
	data_in[3] = #630000 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b1;
	data_in[2] = #630000 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b1;
	data_in[1] = #630000 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b1;
	data_in[0] = #630000 1'b0;
end 

// Mre
initial
begin
	Mre = 1'b0;
	Mre = #210000 1'b1;
	Mre = #90000 1'b0;
end 

// Mwe
initial
begin
	Mwe = 1'b0;
	Mwe = #70000 1'b1;
	Mwe = #60000 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #40000 1'b0;
end 

Cache_vlg_sample_tst tb_sample (
	.address(address),
	.cache_en(cache_en),
	.clock(clock),
	.data_in(data_in),
	.Mre(Mre),
	.Mwe(Mwe),
	.reset(reset),
	.sampler_tx(sampler)
);

Cache_vlg_check_tst tb_out(
	.controller_en_d(controller_en_d),
	.data_out(data_out),
	.delayReq(delayReq),
	.done_cache(done_cache),
	.done_check_d(done_check_d),
	.done_controller_d(done_controller_d),
	.state_con_d(state_con_d),
	.state_d(state_d),
	.sampler_rx(sampler)
);
endmodule

