library	ieee;
use ieee.std_logic_1164.all;
USE ieee.numeric_std.all; 
use work.MP_lib.all;

entity Cache is
port ( 	
		clock					: 	in STD_LOGIC;
		reset					:  in STD_LOGIC;
		Mre					:	in STD_LOGIC;
		Mwe					:	in STD_LOGIC;
		address				:	in STD_LOGIC_VECTOR(11 downto 0);
		data_in				:	in STD_LOGIC_VECTOR(15 downto 0);
		data_out				:	out STD_LOGIC_VECTOR(15 downto 0);
		delayReq				: out std_logic
		-----debug signals----
		
		);
		
end Cache;

architecture behav of Cache is
signal MreIn : std_logic;
signal MweIn : std_logic;

signal Mre_mem: std_logic;
signal Mwe_mem: std_logic;
--signal addressIn: std_LOGIC_VECTOR(11 downto 0);

signal dataIn : std_logic_vector(63 downto 0);
signal data_out_cpu : std_logic_vector(15 downto 0);
signal data_out_mem : std_logic_vector(63 downto 0);
signal address_mem: std_logic_vector(11 downto 0);
signal data_block_in: std_logic_vector(63 downto 0);
signal address_block_in : std_logic_vector(11 downto 0);
signal replaceStatusIn: STD_LOGIC:= '0';
signal replaceStatusOut: std_logic; 
type state_type is (sIdle,sReset, Sdelay,s0,s1, s1b, s1c,s2,s3,s4, s5, s6,s6b,s7,s8);
signal state: state_type;
signal done_out :  std_logic;
signal controller_en : std_logic;
signal hit : std_logic;
signal nextState: state_type;
begin 
	
	Mre_mem <= Mre;
	Mwe_mem <= Mwe;
	data_block_in <= data_out_mem;
	MreIn <= Mre;
	MweIn <= Mwe;
	
	Unit1: CacheController port map(controller_enable, clock,reset,Mre, Mwe, address, address_mem, 
	data_in, data_out_cpu, replaceStatusIn, replaceStatusOut, data_block_in, address_block_in, delayReq, done_out, hit);
	Unit2: MainMemory2 port map(replaceStatusOut, clock,reset, Mre_mem, Mwe_mem, address_mem, dataIn, data_out_mem);

	process(clock, reset)
	variable NumDelayCycles: integer;	
	begin
		if (reset = '1') then
			state <= sReset;
			
		
		else 
			if (rising_edge(Mre)) then 
				
				if (done_out = '1') then 
				controller_en <= '0';
				elsif (rising_edge(clock)) then 
					if controller_en <= '1';
						Case state is 
						
						when sReset => 
								state<= s1;
								controller_en <= '1';
								
						when s0 =>
								if (hit ='0') then 
									state <= s1;
								end if;
						
						when s1 =>
								if (replaceStatusOut = '1') then
									state <= sDelay;
									numDelayCycles := 8;
									nextState <= s2;
								end if;
						
						when s2 =>
								replaceStatusIn <= '1';
								
						
						when sDelay=>
								numDelayCycles := numDelayCycles -1 ;
								if (numDelayCycles = 0) then
										state <= nextState;
								else 
										state <= Sdelay;
								end if;
						
						end case;
					end if;	
			end if;
		end if;
		
	end process;
	process (replaceStatusOut, replaceStatusIn)
	begin
		
		if (replaceStatusOut = '1') then 
			replaceStatusIn <= '1';
		end if;
	end process;
	data_out <= data_out_cpu;

--	replaceBlock: process(clock, replaceStatusOut, replaceStatusIn, data_out_mem, data_out_cpu)
--	begin 
--		if (replaceStatusOut = '1') then 
--			
--		Mre_mem <= '1';
--		replaceStatusIn <= '1';
--		data_block_in <= data_out_mem;
--		--data_out <= data_out_cpu;
--		end if;
--		replaceStatusIn <= '0';
--		--data_out <= data_out_cpu;
--		end process;
end behav;